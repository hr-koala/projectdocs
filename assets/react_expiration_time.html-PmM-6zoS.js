import{_ as e,r as t,o,c as p,a as n,d as s,b as c,e as i}from"./app-lzSeYDl-.js";const r={},l={id:"react-源码解析之-expirationtime",tabindex:"-1"},u=n("a",{class:"header-anchor",href:"#react-源码解析之-expirationtime","aria-hidden":"true"},"#",-1),d={href:"https://juejin.cn/post/6844903929004687368",target:"_blank",rel:"noopener noreferrer"},k=i(`<p>react17 <a href="/react/react_lane">Lanu 模型</a> 替代 Expiration Time</p><h2 id="expiration-time-概念" tabindex="-1"><a class="header-anchor" href="#expiration-time-概念" aria-hidden="true">#</a> Expiration Time 概念</h2><p>首先 <code>Expiration Time</code> 到底是什么呢？ 根据英文直接翻译可知，<strong>到期时间或者过期时间</strong>。在 React 中到期时间概念又如何理解，我们不妨从它的作用入手理解到底是什么概念。</p><h2 id="expiration-time-作用" tabindex="-1"><a class="header-anchor" href="#expiration-time-作用" aria-hidden="true">#</a> Expiration Time 作用</h2><p>在 React 中，源码位置是在 准备阶段 <code>updateContainer</code> 的位置 调用 <code>computeExpirationForFiber</code> 计算时间，这里是在准备阶段创建好 React 的更新对象，为后面的后面 React 调度做准备。它代表的是 <strong>任务在未来的哪个时间点上应该被执行</strong>，不然它就过期了。具体可以查看 <code>react-reconciler</code> 包中 <code>ReactFiberExpirationTime.js</code> 具体的代码内容</p><p>总结一下：React 在创建更新的过程 为了后面更新调度的时候，<strong>合理安排更新顺序</strong>，React 会设置一个过期时间（Expiration Time），当 <code>Expiration-Time</code> 到了以后，就会强制更新。</p><h2 id="具体源码内容" tabindex="-1"><a class="header-anchor" href="#具体源码内容" aria-hidden="true">#</a> <strong>具体源码内容</strong></h2><p>源码因为版本不一样，会有大同小异，这里不做具体分析</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">updateContainer</span><span class="token punctuation">(</span>
  element<span class="token operator">:</span> ReactNodeList<span class="token punctuation">,</span>
  container<span class="token operator">:</span> OpaqueRoot<span class="token punctuation">,</span>
  parentComponent<span class="token operator">:</span> <span class="token operator">?</span>React$Component<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
  callback<span class="token operator">:</span> <span class="token operator">?</span><span class="token builtin">Function</span>
<span class="token punctuation">)</span><span class="token operator">:</span> ExpirationTime <span class="token punctuation">{</span>
  <span class="token comment">// 获取当前 更新的 Fiber 节点</span>
  <span class="token keyword">const</span> current <span class="token operator">=</span> container<span class="token punctuation">.</span>current<span class="token punctuation">;</span>
  <span class="token comment">// 获取当前的时间</span>
  <span class="token keyword">const</span> currentTime <span class="token operator">=</span> <span class="token function">requestCurrentTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 计算 ExpirationTime</span>
  <span class="token keyword">const</span> expirationTime <span class="token operator">=</span> <span class="token function">computeExpirationForFiber</span><span class="token punctuation">(</span>currentTime<span class="token punctuation">,</span> current<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">updateContainerAtExpirationTime</span><span class="token punctuation">(</span>
    element<span class="token punctuation">,</span>
    container<span class="token punctuation">,</span>
    parentComponent<span class="token punctuation">,</span>
    expirationTime<span class="token punctuation">,</span>
    callback
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="如何计算-expiration-time" tabindex="-1"><a class="header-anchor" href="#如何计算-expiration-time" aria-hidden="true">#</a> 如何计算 Expiration Time</h2><p>首先我们看 Expiration Time 代码，这里只是涉及到计算方式</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">import</span> <span class="token constant">MAX_SIGNED_31_BIT_INT</span> <span class="token keyword">from</span> <span class="token string">&quot;./maxSigned31BitInt&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">ExpirationTime</span> <span class="token operator">=</span> <span class="token builtin">number</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> NoWork <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> Sync <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> Never <span class="token operator">=</span> <span class="token constant">MAX_SIGNED_31_BIT_INT</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token constant">UNIT_SIZE</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">MAGIC_NUMBER_OFFSET</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>

<span class="token comment">// 1 个过期时间单位代表 10ms.</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">msToExpirationTime</span><span class="token punctuation">(</span>ms<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> ExpirationTime <span class="token punctuation">{</span>
  <span class="token comment">// 始终添加一个偏移量，这样我们就不会与 NoWork 的幻数发生冲突.</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ms <span class="token operator">/</span> <span class="token constant">UNIT_SIZE</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token constant">MAGIC_NUMBER_OFFSET</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">expirationTimeToMs</span><span class="token punctuation">(</span>expirationTime<span class="token operator">:</span> ExpirationTime<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>expirationTime <span class="token operator">-</span> <span class="token constant">MAGIC_NUMBER_OFFSET</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token constant">UNIT_SIZE</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">ceiling</span><span class="token punctuation">(</span>num<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> precision<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>num <span class="token operator">/</span> precision<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> precision<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 核心内容</span>
<span class="token keyword">function</span> <span class="token function">computeExpirationBucket</span><span class="token punctuation">(</span>
  currentTime<span class="token punctuation">,</span>
  expirationInMs<span class="token punctuation">,</span>
  bucketSizeMs
<span class="token punctuation">)</span><span class="token operator">:</span> ExpirationTime <span class="token punctuation">{</span>
  <span class="token comment">// currentTime 是当前的时间戳</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token constant">MAGIC_NUMBER_OFFSET</span> <span class="token operator">+</span>
    <span class="token function">ceiling</span><span class="token punctuation">(</span>
      currentTime <span class="token operator">-</span> <span class="token constant">MAGIC_NUMBER_OFFSET</span> <span class="token operator">+</span> expirationInMs <span class="token operator">/</span> <span class="token constant">UNIT_SIZE</span><span class="token punctuation">,</span>
      bucketSizeMs <span class="token operator">/</span> <span class="token constant">UNIT_SIZE</span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">LOW_PRIORITY_EXPIRATION</span> <span class="token operator">=</span> <span class="token number">5000</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">LOW_PRIORITY_BATCH_SIZE</span> <span class="token operator">=</span> <span class="token number">250</span><span class="token punctuation">;</span>

<span class="token comment">// 普通异步类型</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">computeAsyncExpiration</span><span class="token punctuation">(</span>
  currentTime<span class="token operator">:</span> ExpirationTime
<span class="token punctuation">)</span><span class="token operator">:</span> ExpirationTime <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">computeExpirationBucket</span><span class="token punctuation">(</span>
    currentTime<span class="token punctuation">,</span>
    <span class="token constant">LOW_PRIORITY_EXPIRATION</span><span class="token punctuation">,</span>
    <span class="token constant">LOW_PRIORITY_BATCH_SIZE</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">HIGH_PRIORITY_EXPIRATION</span> <span class="token operator">=</span> __DEV__ <span class="token operator">?</span> <span class="token number">500</span> <span class="token operator">:</span> <span class="token number">150</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">HIGH_PRIORITY_BATCH_SIZE</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>

<span class="token comment">// Interactive 类型</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">computeInteractiveExpiration</span><span class="token punctuation">(</span>currentTime<span class="token operator">:</span> ExpirationTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">computeExpirationBucket</span><span class="token punctuation">(</span>
    currentTime<span class="token punctuation">,</span>
    <span class="token constant">HIGH_PRIORITY_EXPIRATION</span><span class="token punctuation">,</span>
    <span class="token constant">HIGH_PRIORITY_BATCH_SIZE</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码可以看到两种类型的 <code>Expiration Time</code> 一种是 <strong>普通异步</strong>的 一种是 <code>Interactive</code> 类型 Interactive 比如说是由事件触发的，那么它的响应优先级会比较高 因为涉及到交互。</p><h2 id="举例-核心内容" tabindex="-1"><a class="header-anchor" href="#举例-核心内容" aria-hidden="true">#</a> <strong>举例&amp;核心内容</strong></h2><p>我们随便拿一个类型举例 <code>computeExpirationBucket</code> 中传入 <code>currentTime 5000 250</code> 这里涉及到一个方法 <code>ceiling</code> 可以理解成取整的方法 最终可以得到 <code>((((currentTime - 2 + 5000 / 10) / 25) | 0) + 1) \\* 25</code> 其中 25 是 250 / 10, | 0 是取整的作用</p><p>公式的含义是什么呢？</p><ul><li>前面 <code>currentTime - 2 + 5000 / 10</code> 这部分是相对固定的内容 等于说是当前时间 + 498</li><li>然后 ➗ 25 取整 然后 ➕ 1 再 × 5</li><li>最后就是 （当前时间 + 498）➗ 25 取整 然后 ➕ 1 再 × 5</li></ul><p>当前时间加上 498 然后处以 25 取整再加 1 再乘以 5，需要注意的是这里的 currentTime 是经过 <code>msToExpirationTime</code> 处理的，也就是<code>((now / 10) | 0) + 2</code>，所以这里的减去 2 可以无视，而除以 10 取整应该是要抹平 10 毫秒内的误差，当然最终要用来计算时间差的时候会调用 <code>expirationTimeToMs</code> 恢复回去，但是被取整去掉的 10 毫秒误差肯定是回不去的</p><p>简单来说在这里，最终结果是以 25 为单位向上增加的，比如说我们输入 <code>10002 - 10026</code> 之间，最终得到的结果都是 10525，但是到了 <code>10027</code> 的到的结果就是 <code>10550</code>，这就是除以 25 取整的效果。</p><p>另外一个要提的就是 <code>msToExpirationTime</code> 和 <code>expirationTimeToMs</code> 方法，他们是想换转换的关系。这里需要注意有一点非常重要，那就是用来计算 <code>expirationTime</code> 的 <code>currentTime</code> 是通过 <code>msToExpirationTime(now)</code>得到的，也就是预先处理过的，先处以 10 再加了 2 这里的 2 是 <code>magicNumberOffset</code>，所以后面计算 <code>expirationTime</code> 要减去 2 就可以理解了</p><h2 id="单元概念" tabindex="-1"><a class="header-anchor" href="#单元概念" aria-hidden="true">#</a> 单元概念</h2><p>代码</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">HIGH_PRIORITY_EXPIRATION</span> <span class="token operator">=</span> __DEV__ <span class="token operator">?</span> <span class="token number">500</span> <span class="token operator">:</span> <span class="token number">150</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">HIGH_PRIORITY_BATCH_SIZE</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">LOW_PRIORITY_EXPIRATION</span> <span class="token operator">=</span> <span class="token number">5000</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">LOW_PRIORITY_BATCH_SIZE</span> <span class="token operator">=</span> <span class="token number">250</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面提到的 25 就是一个 <strong>时间单元</strong> 在这个时间单元内计算出来的 <code>Expiration-Time</code> 都是一样的，React 是 为了在同一个时间单元内更新的内容都是用相同的 Expiration-Time 这样更新会被合并. 假设如果没有单元概念的话，这样每次调用创建更新，都没有优先级顺序，这样就会浪费性能，影响效率了。 这样 Expiration-Time 就有了优先级，方便后续调度更新。</p><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> <strong>小结</strong></h2><p>React 这么设计抹相当于抹平了 25ms 内计算过期时间的误差，这样做的目的是为了非常详尽的两次更新得到相同的 <code>expirationTime</code>, ，然后在一次更新中完成，相当于一个自动的 <code>batchedUpdates</code> 批量更新</p><p>以上是 <code>expirationTime</code> 的计算方法。</p><p>附加内容</p><p>在 React 中我们计算 <code>expirationTime</code> 要基于当前得时钟时间，一般来说我们只需要获取 <code>Date.now</code> 或者 <code>performance.now</code> 可以，但是每次获取一下呢比较消耗性能，所以呢 React 设置了 <code>currentRendererTime</code> 来记录这个值，用于一些不需要重新计算得场景。</p><p>但是在 <code>ReactFiberScheduler</code> 中呢又提供了 <code>currentSchedulerTime</code> 这个变量，同样也是记录这个值的，我们看一下 <code>requestCurrentTime</code> 方法的实现。 这里看注释就知道为什么了，直接返回最近的时间</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>isRendering<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// We&#39;re already rendering. Return the most recently read time.</span>
  <span class="token keyword">return</span> currentSchedulerTime<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个 <code>isRendering</code> 只有在 <code>performWorkOnRoot</code> 的时候才会被设置为 true，而其本身是一个同步的方法，不存在他执行到一半没有设置 <code>isRendering</code> 为 false 的时候就跳出，那么什么情况下会在这里出现新的 <code>requestCurrentTime</code> 呢？</p><ul><li>在生命周期方法中调用了 <code>setState</code> 方法</li><li>需要挂起任务的时候</li></ul><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>
  nextFlushedExpirationTime <span class="token operator">===</span> NoWork <span class="token operator">||</span>
  nextFlushedExpirationTime <span class="token operator">===</span> Never
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// If there&#39;s no pending work, or if the pending work is offscreen, we can</span>
  <span class="token comment">// read the current time without risk of tearing.</span>
  <span class="token function">recomputeCurrentRendererTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  currentSchedulerTime <span class="token operator">=</span> currentRendererTime<span class="token punctuation">;</span>
  <span class="token keyword">return</span> currentSchedulerTime<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也就是说在一个<code>batched</code>更新中，只有第一次创建更新才会重新计算时间，后面的所有更新都会复用第一次创建更新的时候的时间，这个也是为了<strong>保证在一个批量更新中产生的同类型的更新只会有相同的过期时间</strong></p>`,35);function m(v,b){const a=t("ExternalLinkIcon");return o(),p("div",null,[n("h1",l,[u,s(),n("a",d,[s("React 源码解析之 ExpirationTime"),c(a)])]),k])}const T=e(r,[["render",m],["__file","react_expiration_time.html.vue"]]);export{T as default};
