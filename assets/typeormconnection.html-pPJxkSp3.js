import{_ as n,o as s,c as a,e as t}from"./app-lzSeYDl-.js";const e={},p=t(`<h1 id="typeorm-框架中的-connection-数据库连接池" tabindex="-1"><a class="header-anchor" href="#typeorm-框架中的-connection-数据库连接池" aria-hidden="true">#</a> TypeORM 框架中的 Connection 数据库连接池</h1><h2 id="什么是-connection" tabindex="-1"><a class="header-anchor" href="#什么是-connection" aria-hidden="true">#</a> 什么是 Connection</h2><p>调用 Connection 的 connect 方法，就建立连接池设置，使用 createConnection 函数设置连接，调用 close 时会断开连接（关闭池中的所有连接）</p><h2 id="创建连接数据库" tabindex="-1"><a class="header-anchor" href="#创建连接数据库" aria-hidden="true">#</a> 创建连接数据库</h2><p>最简单和最常用的方法是使用 createConnection 和 createConnections 函数</p><h2 id="createconnection-函数创建并连接数据库" tabindex="-1"><a class="header-anchor" href="#createconnection-函数创建并连接数据库" aria-hidden="true">#</a> createConnection 函数创建并连接数据库</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 引入typeORM框架提供的方法</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> createConnection<span class="token punctuation">,</span> Connection <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;typeorm&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 建立连接数据库</span>
<span class="token keyword">const</span> connection <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">createConnection</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">// 数据库类型，比如mysql、postgres等</span>
  <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;mysql&quot;</span><span class="token punctuation">,</span>
  <span class="token comment">// 数据库的主机名或IP地址</span>
  <span class="token literal-property property">host</span><span class="token operator">:</span> <span class="token string">&quot;localhost&quot;</span><span class="token punctuation">,</span>
  <span class="token comment">// 数据库的端口号，默认为3306</span>
  <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token number">3306</span><span class="token punctuation">,</span>
  <span class="token comment">// 数据库的用户名</span>
  <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">&quot;root&quot;</span><span class="token punctuation">,</span>
  <span class="token comment">// 数据库的密码</span>
  <span class="token literal-property property">password</span><span class="token operator">:</span> <span class="token string">&quot;123456&quot;</span><span class="token punctuation">,</span>
  <span class="token comment">// 数据库的数据库名</span>
  <span class="token literal-property property">database</span><span class="token operator">:</span> <span class="token string">&quot;user&quot;</span><span class="token punctuation">,</span>
  <span class="token comment">// 数据库的实体类(告诉创建的连接，有哪些实体)</span>
  entities：<span class="token punctuation">[</span>__dirname <span class="token operator">+</span> <span class="token string">&#39;/entity/*.ts&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token comment">// 是否自动创建数据库的表和列</span>
  <span class="token literal-property property">synchronize</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token comment">// 数据库迁移是否已经执行</span>
  <span class="token literal-property property">migrationsRun</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token comment">// 数据库的迁移</span>
  <span class="token literal-property property">migrations</span><span class="token operator">:</span> <span class="token punctuation">[</span>__dirname <span class="token operator">+</span> <span class="token string">&#39;/entity/*.ts&#39;</span><span class="token punctuation">]</span>
  <span class="token comment">// 是否打印日志</span>
  logging：<span class="token string">&quot;表达式为true打印，反之不打印&quot;</span>，
  <span class="token comment">// 还可以进行日志打印选项</span>
  logging：<span class="token punctuation">[</span><span class="token string">&quot;query&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;error&quot;</span><span class="token punctuation">]</span>，
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：synchronize 在开发使用时可以为 true,但是上线后必须为 false，因为会覆盖表的数据</p><h4 id="logging-的配置选项" tabindex="-1"><a class="header-anchor" href="#logging-的配置选项" aria-hidden="true">#</a> logging 的配置选项：</h4><ul><li>query - 记录所有查询。</li><li>error - 记录所有失败的查询和错误。</li><li>schema - 记录架构构建过程。</li><li>warn - 记录内部 orm 警告。</li><li>info - 记录内部 orm 信息性消息。</li><li>log - 记录内部 orm 日志消息。</li></ul><h4 id="迁移" tabindex="-1"><a class="header-anchor" href="#迁移" aria-hidden="true">#</a> 迁移：</h4><p>一旦上线生产环境，你将需要将模型更改同步到数据库中。 通常在数据库中获取数据后，使用 synchronize：true 进行生产模式同步是不安全的。 因此这时候使用迁移，可以解决此类问题。</p><p>迁移用于更新数据库架构并将新更改应用于现有数据库</p><h2 id="createconnections-函数创建并连接数据库" tabindex="-1"><a class="header-anchor" href="#createconnections-函数创建并连接数据库" aria-hidden="true">#</a> createConnections 函数创建并连接数据库</h2><p>在创建的数组里面，有多个对象，每个对象连接不同的数据库</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createConnections<span class="token punctuation">,</span> Connection <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;typeorm&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> connections <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">createConnections</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;default&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;mysql&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">host</span><span class="token operator">:</span> <span class="token string">&quot;localhost&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token number">3306</span><span class="token punctuation">,</span>
    <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">&quot;test&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">password</span><span class="token operator">:</span> <span class="token string">&quot;test&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">database</span><span class="token operator">:</span> <span class="token string">&quot;test&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;test2-connection&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;mysql&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">host</span><span class="token operator">:</span> <span class="token string">&quot;localhost&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token number">3306</span><span class="token punctuation">,</span>
    <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">&quot;test&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">password</span><span class="token operator">:</span> <span class="token string">&quot;test&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">database</span><span class="token operator">:</span> <span class="token string">&quot;test2&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="使用连接数据库" tabindex="-1"><a class="header-anchor" href="#使用连接数据库" aria-hidden="true">#</a> 使用连接数据库</h2><h3 id="getconnection-方法" tabindex="-1"><a class="header-anchor" href="#getconnection-方法" aria-hidden="true">#</a> getConnection（）方法</h3><p>创建连接后，可以使用 getConnection 方法从应用程序中的任何位置使用它</p><p>方法一、</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> getConnection <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;typeorm&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 可以在调用createConnection后使用并解析</span>
<span class="token comment">// 不同的连接必须具有不同的名称。默认情况下，如果未指定连接名称，则为 default</span>
<span class="token keyword">const</span> connection <span class="token operator">=</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 如果你有多个连接，则可以按名称获取连接（名称就是name属性值）</span>
<span class="token keyword">const</span> secondConnection <span class="token operator">=</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token string">&quot;test2-connection&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>方法二、</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> getConnection <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;typeorm&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> User <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;../entity/User&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 处理用户相关的请求</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>
  <span class="token comment">// 表示该方法用于处理\`/users\`的GET请求</span>
  @<span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;/users&quot;</span><span class="token punctuation">)</span>
  <span class="token comment">// 用于获取所有用户的数据</span>
  <span class="token function">getAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 这行代码的含义是查询数据库中 User 表中的所有数据</span>
    <span class="token keyword">return</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>manager<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>User<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>分析：</p><p>调用 typeorm 库中的 getConnection 方法获取数据库连接对象，然后使用 manager 方法创建一个操作数据库的管理器，最后使用 find 方法查询 User 表中的所有数据，并返回查询结果</p><h3 id="getrepository-和-getmanager-方法" tabindex="-1"><a class="header-anchor" href="#getrepository-和-getmanager-方法" aria-hidden="true">#</a> getRepository()和 getManager()方法</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> getManager<span class="token punctuation">,</span> getRepository <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;typeorm&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> User <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;../entity/User&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>
  @<span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;/users&quot;</span><span class="token punctuation">)</span>
  <span class="token function">getAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 查询数据库中 User 表中的所有数据，并返回查询结果</span>
    <span class="token keyword">return</span> <span class="token function">getManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>User<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  @<span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;/users/:id&quot;</span><span class="token punctuation">)</span>
  <span class="token comment">// 用于获取指定 id 的用户数据</span>
  <span class="token comment">//使用了 @Param 装饰器将路由参数 id 注入到方法中的 userId 参数中</span>
  <span class="token function">getAll</span><span class="token punctuation">(</span>@<span class="token function">Param</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span> userId<span class="token operator">:</span> number<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 查询数据库中 User 表中指定 （id为1和敏子为张三） 的用户数据，并返回查询结果</span>
    <span class="token keyword">return</span> <span class="token function">getRepository</span><span class="token punctuation">(</span>User<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">userId</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>return getManager().find(User); 调用 typeorm 库中的 getManager 方法获取数据库连接对象，然后使用 find 方法查询 User 表中的所有数据，并返回查询结果。</p><p>return getRepository(User).findOne(userId); 调用 typeorm 库中的 getRepository 方法获取 User 实体类的仓库对象，然后使用 findOne 方法查询指定（id 为 1 和敏子为张三）的用户数据，并返回查询结果。</p><h3 id="特殊情况-单个连接中使用多个数据库" tabindex="-1"><a class="header-anchor" href="#特殊情况-单个连接中使用多个数据库" aria-hidden="true">#</a> (特殊情况)单个连接中使用多个数据库</h3><p>使用数据库的目的是，查询表中的数据，数据就是每个表中的实体，在构建实体的时候，就要指定存储在那个数据库中，想看懂是怎么使用多个数据的，就先要知道实体是什么？实体怎么构建的？实体怎么指定存储数据库的？</p><p>不想创建多个连接，但是想在一个连接中使用多个数据库，则可以指定使用的每个实体的数据库名称</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Entity<span class="token punctuation">,</span> PrimaryGeneratedColumn<span class="token punctuation">,</span> Column <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;typeorm&quot;</span><span class="token punctuation">;</span>

@<span class="token function">Entity</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">database</span><span class="token operator">:</span> <span class="token string">&quot;secondDB&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
  @<span class="token function">PrimaryGeneratedColumn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token literal-property property">id</span><span class="token operator">:</span> number<span class="token punctuation">;</span>

  @<span class="token function">Column</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token literal-property property">firstName</span><span class="token operator">:</span> string<span class="token punctuation">;</span>

  @<span class="token function">Column</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token literal-property property">lastName</span><span class="token operator">:</span> string<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Entity<span class="token punctuation">,</span> PrimaryGeneratedColumn<span class="token punctuation">,</span> Column <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;typeorm&quot;</span><span class="token punctuation">;</span>

@<span class="token function">Entity</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">database</span><span class="token operator">:</span> <span class="token string">&quot;thirdDB&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Photo</span> <span class="token punctuation">{</span>
  @<span class="token function">PrimaryGeneratedColumn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token literal-property property">id</span><span class="token operator">:</span> number<span class="token punctuation">;</span>

  @<span class="token function">Column</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token literal-property property">url</span><span class="token operator">:</span> string<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>user 实体将在 secondDB 数据库内创建，Photo 实体则在 thirdDB 数据库内</p><p>获取数据库中的数据</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> users <span class="token operator">=</span> <span class="token keyword">await</span> connection
    <span class="token comment">// 创建一个查询构建器</span>
    <span class="token punctuation">.</span><span class="token function">createQueryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment">// 选择需要查询的列</span>
    <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment">// 指定查询的表，即 User 表，同时起了一个别名 user</span>
    <span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>User<span class="token punctuation">,</span> <span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span>
    <span class="token comment">// 添加一个查询的表，即 Photo 表，起一个别名 photo</span>
    <span class="token punctuation">.</span><span class="token function">addFrom</span><span class="token punctuation">(</span>Photo<span class="token punctuation">,</span> <span class="token string">&quot;photo&quot;</span><span class="token punctuation">)</span>
    <span class="token comment">// 查询条件,表示需要查询\`Photo\`表中的\`userId\`列和\`User\`表中的\`id\`列相等的数据</span>
    <span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string">&quot;photo.userId = user.id&quot;</span><span class="token punctuation">)</span>
    <span class="token comment">// 添加查询条件,表示需要查询\`Photo\`表中的\`firstName\`列中为 张三 的数据</span>
    <span class="token punctuation">.</span><span class="token function">andWhere</span><span class="token punctuation">(</span><span class="token string">&quot;photo.firstName = :id&quot;</span>，<span class="token punctuation">{</span> id：<span class="token string">&quot;张三&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token comment">// 获取所有符合条件的结果集合，返回一个\`Promise\`对象</span>
    <span class="token punctuation">.</span><span class="token function">getMany</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// userId因其跨数据库请求而不是外键</span>

<span class="token comment">// 补充： getOne()方法表示只获取一条满足查询条件的数据，返回一个Promise对象</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="特殊情况-单个连接中使用多个模式" tabindex="-1"><a class="header-anchor" href="#特殊情况-单个连接中使用多个模式" aria-hidden="true">#</a> (特殊情况)单个连接中使用多个模式</h4><p>schema 用于指定数据库中实体的所属模式（Schema），它是一种将数据库对象划分为多个独立组的方式，这样可以在同一个数据库实例中创建多个独立的组，每个组中的对象相互独立，不会相互干扰。在多租户应用程序中，可以使用模式来实现租户的分离，避免数据冲突</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Entity<span class="token punctuation">,</span> PrimaryGeneratedColumn<span class="token punctuation">,</span> Column <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;typeorm&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 这个实体存储在secondDB数据库中，并且属于名为 public 的模式</span>
@<span class="token function">Entity</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">database</span><span class="token operator">:</span> <span class="token string">&quot;secondDB&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">schema</span><span class="token operator">:</span> <span class="token string">&quot;public&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
  @<span class="token function">PrimaryGeneratedColumn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token literal-property property">id</span><span class="token operator">:</span> number<span class="token punctuation">;</span>

  @<span class="token function">Column</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token literal-property property">firstName</span><span class="token operator">:</span> string<span class="token punctuation">;</span>

  @<span class="token function">Column</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token literal-property property">lastName</span><span class="token operator">:</span> string<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,40),o=[p];function c(i,l){return s(),a("div",null,o)}const u=n(e,[["render",c],["__file","typeormconnection.html.vue"]]);export{u as default};
