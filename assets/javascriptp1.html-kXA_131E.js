import{_ as n,o as a,c as s,e}from"./app-lzSeYDl-.js";const t={},p=e(`<h3 id="preventdefault-方法有什么用" tabindex="-1"><a class="header-anchor" href="#preventdefault-方法有什么用" aria-hidden="true">#</a> preventDefault 方法有什么用?</h3><p>如果事件是可取消的,则 <code>preventDefault()</code>方法会取消事件,这意味着属于该事件的默认操作或行为将不会发生。 <strong><em>注意</em></strong> 请记住，并非所有的事件都可以取消</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;btn&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="stoppropagation-方法有什么用" tabindex="-1"><a class="header-anchor" href="#stoppropagation-方法有什么用" aria-hidden="true">#</a> stopPropagation 方法有什么用?</h3><p><code>stopPropagation</code> 方法用于阻止事件在事件链中向上冒泡</p><h3 id="return-false-涉及哪些步骤" tabindex="-1"><a class="header-anchor" href="#return-false-涉及哪些步骤" aria-hidden="true">#</a> return false 涉及哪些步骤?</h3><p>事件处理程序中的 <code>return false</code> 语句执行以下步骤，</p><ul><li><ol><li>首先它停止浏览器的默认操作或行为。</li></ol></li><li><ol start="2"><li>它阻止事件传播 DOM。</li></ol></li><li><ol start="3"><li>停止回调执行并在调用时立即返回。</li></ol></li></ul><h3 id="什么是-bom-浏览器对象模型" tabindex="-1"><a class="header-anchor" href="#什么是-bom-浏览器对象模型" aria-hidden="true">#</a> 什么是 BOM (浏览器对象模型)?</h3><p><strong>浏览器对象模型(BOM)</strong> 允许 JavaScript 与浏览器&quot;对话&quot;。它由作为窗口子项的对象导航器、历史记录、屏幕、位置和文档组成。浏览器对象模型不是标准化的，可以根据不同的浏览器而变化。</p><h3 id="settimeout-有什么用" tabindex="-1"><a class="header-anchor" href="#settimeout-有什么用" aria-hidden="true">#</a> setTimeout 有什么用？</h3><p><code>setTimeout()</code> 方法用于在指定的毫秒数后调用函数或计算表达式。 <code>clearTimeout()</code> 函数来清除之前由 setTimeout() 函数设置的超时</p><h3 id="setinterval-有什么用" tabindex="-1"><a class="header-anchor" href="#setinterval-有什么用" aria-hidden="true">#</a> setInterval 有什么用？</h3><p><code>setInterval()</code> 方法用于以指定的时间间隔（以毫秒为单位）调用函数或计算表达式。 <code>clearInterval()</code> 函数清除 <code>setInterval()</code> 函数设置的间隔。</p><h3 id="什么是-event-delegation-事件委托" tabindex="-1"><a class="header-anchor" href="#什么是-event-delegation-事件委托" aria-hidden="true">#</a> 什么是 event delegation（事件委托）？</h3><p>事件委托是一种侦听事件的技术，您可以委托一个父元素作为其内部发生的所有事件的侦听器。</p><h3 id="json-字符串化的目的是什么-如何解析-json-字符串" tabindex="-1"><a class="header-anchor" href="#json-字符串化的目的是什么-如何解析-json-字符串" aria-hidden="true">#</a> JSON 字符串化的目的是什么？如何解析 JSON 字符串？</h3><p>向 Web 服务器发送数据时，数据必须采用字符串格式。您可以通过使用 <code>stringify()</code> 方法将 JSON 对象转换为字符串来实现此目的。</p><p>从 Web 服务器接收数据时，数据始终为字符串格式。但是您可以使用 <code>parse()</code> 方法将此字符串值转换为 javascript 对象。</p><h3 id="什么是-json-json-的语法规则是什么" tabindex="-1"><a class="header-anchor" href="#什么是-json-json-的语法规则是什么" aria-hidden="true">#</a> 什么是 JSON？JSON 的语法规则是什么？</h3><p>JSON（JavaScript Object Notation）是一种用于数据交换的轻量级格式。它基于 JavaScript 语言的一个子集，对象是在 JavaScript 中构建的。</p><p>JSON 的语法规则： 1.数据在名称/值对中 2.数据以逗号分隔 3.花括号容纳对象 4.方括号保存数组</p><h3 id="为什么需要-json" tabindex="-1"><a class="header-anchor" href="#为什么需要-json" aria-hidden="true">#</a> 为什么需要 JSON？</h3><p>在浏览器和服务器之间交换数据时，数据只能是文本。由于 JSON 仅为文本，因此它可以轻松地与服务器之间发送，并可用作任何编程语言的数据格式。</p><ul><li>1.其实用 JSON 主要是因为它轻量，各个平台语言都支持 JSON 交互、JSON 解析和存储。</li><li>2.JSON 常用于我们接口交互，前后端交互中，有解析速度快，方便的特点。</li><li>3.JSON 常用于我们一些配置文件也是因为解析方便，JSON 存储数据体积小等特征，而不像 XML、PList（也是 xml 的一种）等格式，定义各种 Dom 节点（当然复杂的格式还是建议 XML）。</li></ul><h3 id="location-对象的各种-url-属性是什么" tabindex="-1"><a class="header-anchor" href="#location-对象的各种-url-属性是什么" aria-hidden="true">#</a> location 对象的各种 url 属性是什么？</h3><p>以下 <code>Location</code> 对象属性可用于访问页面的 URL 组件，</p><ol><li>href - 整个 URL</li><li>protocol - URL 的协议</li><li>host - URL 的主机名和端口</li><li>hostname - URL 的主机名</li><li>port - URL 中的端口号</li><li>pathname - URL 的路径名</li><li>search - URL 的查询部分</li><li>hash - URL 的锚点部分</li></ol><h3 id="如何测试一个空对象" tabindex="-1"><a class="header-anchor" href="#如何测试一个空对象" aria-hidden="true">#</a> 如何测试一个空对象？</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 1.使用对象条目长度和构造函数类型</span>
Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> obj<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Object<span class="token punctuation">;</span>
<span class="token comment">// 2.使用对象键长度和构造函数类型</span>
Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> obj<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Object<span class="token punctuation">;</span>
<span class="token comment">// 3.将for-in 循环与hasOwnProperty一起使用</span>
<span class="token keyword">function</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> prop <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>prop<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> fasle<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><div class="highlight-line"> </div><br><div class="highlight-line"> </div><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使字符串的第一个字母大写" tabindex="-1"><a class="header-anchor" href="#使字符串的第一个字母大写" aria-hidden="true">#</a> 使字符串的第一个字母大写？</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">capitalizeFirstLetter</span><span class="token punctuation">(</span><span class="token parameter">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> string<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> string<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="什么是-app-shell-model" tabindex="-1"><a class="header-anchor" href="#什么是-app-shell-model" aria-hidden="true">#</a> 什么是 app shell model？</h3><p>application shell (或者是 app shell)架构是构建渐进式 Web 应用程序的一种方式，该应用程序可以可靠且即时地加载到用户的屏幕上，类似于您在本机应用程序中看到的内容。这对于在没有网络的情况下快速将一些初始 HTML 显示到屏幕上很有用。</p><h3 id="什么是-polyfill" tabindex="-1"><a class="header-anchor" href="#什么是-polyfill" aria-hidden="true">#</a> 什么是 polyfill？</h3><p>polyfill 是一段 JS 代码，用于在本身不支持它的旧浏览器上提供现代功能。例如，Silverlight 插件 polyfill 可用于模拟 Microsoft Internet Explorer 7 上的 HTML Canvas 元素的功能。</p><h3 id="什么是-tree-shaking-摇树-tree-shaking-摇树-需要什么" tabindex="-1"><a class="header-anchor" href="#什么是-tree-shaking-摇树-tree-shaking-摇树-需要什么" aria-hidden="true">#</a> 什么是 tree shaking（摇树）？tree shaking（摇树）需要什么？</h3><p>tree shaking（摇树）是消除死代码的一种形式。这意味着在构建过程中未使用的模块不会包含在包中，因此它依赖于 ES2015 模块语法的静态结构，（即导入和导出）。最初这已被 ES2015 模块捆绑器推广 rollup。</p><p>Tree Shaking 可以显着减少任何应用程序中的代码大小。即，我们通过网络发送的代码越少，应用程序的性能就越高。例如，如果我们只想使用 SPA 框架创建一个“Hello World”应用程序，那么它大约需要几 MB，但是通过 treeShaking，它可以将大小降低到几百 KB。摇树在 Rollup 和 Webpack 打包器中实现。</p><h3 id="如何检测移动浏览器" tabindex="-1"><a class="header-anchor" href="#如何检测移动浏览器" aria-hidden="true">#</a> 如何检测移动浏览器？</h3><p>您可以使用正则表达式，它会根据用户是否使用手机浏览来返回 true 或 false 值。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function-variable function">mobilecheck</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> mobileCheck <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>
      <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>
        a
      <span class="token punctuation">)</span> <span class="token operator">||</span>
      <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>
        a<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>
      <span class="token punctuation">)</span>
    <span class="token punctuation">)</span>
      mobileCheck <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>navigator<span class="token punctuation">.</span>userAgent <span class="token operator">||</span> navigator<span class="token punctuation">.</span>vendor <span class="token operator">||</span> window<span class="token punctuation">.</span>opera<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> mobileCheck<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="用于获取窗口大小的属性是什么" tabindex="-1"><a class="header-anchor" href="#用于获取窗口大小的属性是什么" aria-hidden="true">#</a> 用于获取窗口大小的属性是什么？</h3><p>你可以使用窗口、文档元素和文档正文对象的 innerWidth、innerHeight、clientWidth、clientHeight 属性来查找窗口的大小。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> width <span class="token operator">=</span>
  window<span class="token punctuation">.</span>innerWidth <span class="token operator">||</span>
  document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientWidth <span class="token operator">||</span>
  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>clientWidth<span class="token punctuation">;</span>
<span class="token keyword">let</span> height <span class="token operator">=</span>
  window<span class="token punctuation">.</span>innerHeight <span class="token operator">||</span>
  document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientHeight <span class="token operator">||</span>
  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>clientHeight<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="proto-和-prototype-有什么区别" tabindex="-1"><a class="header-anchor" href="#proto-和-prototype-有什么区别" aria-hidden="true">#</a> proto 和 prototype 有什么区别?</h3><p>该<strong>proto</strong>对象是在查找链中用于解析方法等的实际对象。而当你使用 new 创建对象时 prototype，用于构建<strong>proto</strong>的对象是</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Employee</span><span class="token punctuation">.</span><span class="token function">prototype</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token operator">===</span>
  <span class="token keyword">undefined</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="freeze-和-seal-方法有什么区别" tabindex="-1"><a class="header-anchor" href="#freeze-和-seal-方法有什么区别" aria-hidden="true">#</a> freeze 和 seal 方法有什么区别？</h3><p>Object.freeze() 方法冻结对象; 1.它用于冻结对象和数组。 2.它用于使对象不可变。<br> Object.seal() 方法密封对象; 1.它用于密封对象和数组。2.它用于使对象不可变。<br> Object.isFrozen() 方法用于确定对象是否被冻结<br> Object.isSealed() 方法用于确定对象是否已密封</p><h3 id="什么是-weakset" tabindex="-1"><a class="header-anchor" href="#什么是-weakset" aria-hidden="true">#</a> 什么是 WeakSet?</h3><p>WeakSet 用于存储弱（弱引用）持有对象的集合。语法如下， <strong><em>new WeakSet([iterable])</em></strong> WeakSet 上可用的方法列表: 1.add(value)：将给定值附加到弱集的新对象<br> 2.delete(value)：从 WeakSet 集合中删除值。<br> 3.has(value)：如果 WeakSet 集合中存在该值，则返回 true，否则返回 false。<br> 4.length()：它返回 weakSetObject 的长度</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> ws <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
ws<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
ws<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
ws<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
ws<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 从集合中删除user</span>
ws<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false, user 已被删除</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="什么是-weakmap" tabindex="-1"><a class="header-anchor" href="#什么是-weakmap" aria-hidden="true">#</a> 什么是 WeakMap？</h3><p>WeakMap 对象是键/值对的集合，其中的键被弱引用。在这种情况下，键必须是对象，值可以是任意值。语法如下所示， <strong>_ new WeakMap([iterable]) _</strong> WeakMap 上可用的方法列表， 1.set(key, value)：设置 WeakMap 对象中键的值。返回 WeakMap 对象。 2.delete(key)：删除与键关联的任何值。 3.has(key)：返回一个布尔值，断言一个值是否与 WeakMap 对象中的键相关联。 4.get(key)：返回与键关联的值，如果没有则返回 undefined</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> ws <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
ws<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
ws<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
ws<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
ws<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 从 map 中删除用户</span>
ws<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false, user 已被删除</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="weakset-和-set-有什么区别-weakmap-和-map-有什么区别" tabindex="-1"><a class="header-anchor" href="#weakset-和-set-有什么区别-weakmap-和-map-有什么区别" aria-hidden="true">#</a> WeakSet 和 Set 有什么区别？WeakMap 和 Map 有什么区别？</h3><p>主要区别在于 Set 中对象的引用是强引用，而 WeakSet 中对象的引用是弱引用。即，如果没有其他引用 Wea​​kSet 中的对象可以被垃圾回收。 其他区别是:<br> 1.Sets 可以存储任何值而 WeakSets 只能存储对象的集合 2.WeakSet 没有与 Set 不同的 size 属性 3.WeakSet 没有 clear、keys、values、entries、forEach 等方法。 4.WeakSet 不可迭代。</p><p>主要区别在于 Map 中关键对象的引用是强引用，而 WeakMap 中关键对象的引用是弱引用。即，如果没有其他引用 Wea​​kMap 中的键对象可以被垃圾收集。<br> 其他区别是:<br> 1.Maps 可以存储任何类型的键，而 WeakMaps 只能存储键对象的集合 2.与 Map 不同，WeakMap 没有 size 属性 3.WeakMap 没有 clear、keys、values、entries、forEach 等方法。 4.WeakMap 不可迭代。</p><h3 id="什么是原始数据类型" tabindex="-1"><a class="header-anchor" href="#什么是原始数据类型" aria-hidden="true">#</a> 什么是原始数据类型？</h3><p>原始数据类型是具有原始值（没有属性或方法）的数据。有 7 种原始数据类型。</p><p>1.string 2.number 3.boolean 4.null 5.undefined 6.bigint 7.symbol</p><h3 id="什么是构造方法" tabindex="-1"><a class="header-anchor" href="#什么是构造方法" aria-hidden="true">#</a> 什么是构造方法？</h3><p>构造函数方法是用于创建和初始化在类中创建的对象的特殊方法。如果未指定构造函数方法，则使用默认构造函数。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">//一个类中多次编写构造函数方法，它将抛出SyntaxError错误</span>
  <span class="token comment">// constructor() {// Uncaught SyntaxError: A class may only have one constructor(未捕获的语法错误:一个类可能只有一个构造函数)</span>
  <span class="token comment">//   this.age = 10;</span>
  <span class="token comment">// }</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> employeeObject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">&quot;kobe&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>employeeObject<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="如何调用父类的构造函数" tabindex="-1"><a class="header-anchor" href="#如何调用父类的构造函数" aria-hidden="true">#</a> 如何调用父类的构造函数？</h3><p>您可以使用 super 关键字来调用父类的构造函数。请记住，super()必须在使用“this”引用之前调用。否则会导致引用错误。让我们使用它，</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Square</span> <span class="token keyword">extends</span> <span class="token class-name">Rectangle</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">length</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>length<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;Square&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">get</span> <span class="token function">area</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>width <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>height<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">set</span> <span class="token function">area</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>area <span class="token operator">=</span> value<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="检查一个对象是否可以扩展-如何防止对象扩展" tabindex="-1"><a class="header-anchor" href="#检查一个对象是否可以扩展-如何防止对象扩展" aria-hidden="true">#</a> 检查一个对象是否可以扩展？如何防止对象扩展？</h3><p>Object.isExtensible()方法用于确定对象是否可扩展。即，它是否可以添加新属性。<br> Object.preventExtensions()方法用于防止向对象添加新属性</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> newObject <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">isExtensible</span><span class="token punctuation">(</span>newObject<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>
<span class="token comment">// ***==注意==：*** 默认情况下，所有对象都是可扩展的。即，可以添加或修改新属性。</span>

Object<span class="token punctuation">.</span><span class="token function">preventExtensions</span><span class="token punctuation">(</span>newObject<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 不可扩展</span>
<span class="token keyword">try</span> <span class="token punctuation">{</span>
  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>newObject<span class="token punctuation">,</span> <span class="token string">&quot;newProperty&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token comment">// 添加新属性</span>
    <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 类型错误：无法定义属性 newProperty，对象不可扩展</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="什么是-javascript-中的混淆-为什么需要混淆" tabindex="-1"><a class="header-anchor" href="#什么是-javascript-中的混淆-为什么需要混淆" aria-hidden="true">#</a> 什么是 javascript 中的混淆？为什么需要混淆？</h3><p>混淆是故意创建人类难以理解的混淆 javascript 代码（即源代码或机器代码）的行为。它类似于加密，但机器可以理解代码并执行它。</p><p>混淆的几个原因:<br> 1.代码大小将减少。所以服务器和客户端之间的数据传输会很快。 2.它对外界隐藏业务逻辑并保护代码不受他人影响 3.逆向工程难度很大 4.下载时间将减少</p><h3 id="常用的缩小工具有哪些" tabindex="-1"><a class="header-anchor" href="#常用的缩小工具有哪些" aria-hidden="true">#</a> 常用的缩小工具有哪些？</h3><p>有许多在线/离线工具可以缩小 javascript 文件</p><ul><li>谷歌的 Closure 编译器</li><li>jsmin</li><li>javascript-minifier.com</li><li>Prettydiff.com</li></ul><h3 id="可用于约束验证的-dom-方法有哪些" tabindex="-1"><a class="header-anchor" href="#可用于约束验证的-dom-方法有哪些" aria-hidden="true">#</a> 可用于约束验证的 DOM 方法有哪些？</h3><p>以下 DOM 方法可用于对无效输入进行约束验证:<br> 1.checkValidity()：如果输入元素包含有效数据，则返回 true。 2.setCustomValidity()：用于设置输入元素的 validationMessage 属性。让我们使用带有 DOM 验证的用户登录表单</p><p>什么是可用的约束验证 DOM 属性？<br> 下面是一些可用的约束验证 DOM 属性的列表:<br> 1.validity：它提供与输入元素有效性相关的布尔属性列表。 2.validationMessage：当有效性为假时显示消息。 3.willValidate：指示输入元素是否将被验证。</p><p>什么是有效性属性列表？<br> 输入元素的有效性属性提供一组与数据有效性相关的属性:<br> 1.customError：如果设置了自定义有效性消息，则返回 true。 2.patternMismatch：如果元素的值与其模式属性不匹配，则返回 true。 3.rangeOverflow：如果元素的值大于其 max 属性，则返回 true。 4.rangeUnderflow：如果元素的值小于其 min 属性，则返回 true。 5.stepMismatch：如果元素的值根据 step 属性无效，则返回 true。 6.tooLong：如果元素的值超过其 maxLength 属性，则返回 true。 7.typeMismatch：如果元素的值根据 type 属性无效，则返回 true。 8.valueMissing：如果具有必需属性的元素没有值，则返回 true。 9.valid：如果元素的值有效，则返回 true。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>input id<span class="token operator">=</span><span class="token string">&quot;num&quot;</span> type<span class="token operator">=</span><span class="token string">&quot;number&quot;</span> min<span class="token operator">=</span><span class="token string">&quot;10&quot;</span> max<span class="token operator">=</span><span class="token string">&quot;100&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>
  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;num&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>validity<span class="token punctuation">.</span>rangeUnderflow <span class="token operator">||</span>
  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;num&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>validity<span class="token punctuation">.</span>rangeOverflow
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">loh</span><span class="token punctuation">(</span><span class="token string">&quot;number is not allowed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="如何用逗号作为千位分隔符打印数字" tabindex="-1"><a class="header-anchor" href="#如何用逗号作为千位分隔符打印数字" aria-hidden="true">#</a> 如何用逗号作为千位分隔符打印数字？</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">convertToThousandFormat</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> num<span class="token punctuation">.</span><span class="token function">toLocaleString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">convertToThousandFormat</span><span class="token punctuation">(</span><span class="token number">1234567.89</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1,234,567.89</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="什么是-v8-javascript-引擎" tabindex="-1"><a class="header-anchor" href="#什么是-v8-javascript-引擎" aria-hidden="true">#</a> 什么是 V8 JavaScript 引擎？</h3><p>V8 是 Google Chrome 浏览器使用的开源高性能 JavaScript 引擎，用 C++ 编写。它也在 node.js 项目中使用。它实现了 ECMAScript 和 WebAssembly，并在 Windows 7 或更高版本、macOS 10.12+ 和使用 x64、IA-32、ARM 或 MIPS 处理器的 Linux 系统上运行。 <strong><em>==注意==：</em></strong> 它可以独立运行，也可以嵌入到任何 C++ 应用程序中。</p><h3 id="如何创建复制到剪贴板按钮" tabindex="-1"><a class="header-anchor" href="#如何创建复制到剪贴板按钮" aria-hidden="true">#</a> 如何创建复制到剪贴板按钮？</h3><p>您需要选择输入元素的内容（使用 .select() 方法）并使用 execCommand 执行复制命令（即 execCommand(&#39;copy&#39;)）。您还可以执行其他系统命令，如剪切和粘贴。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;#copy-button&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 选择内容</span>
  document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;#copy-input&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 复制到剪贴板</span>
  document<span class="token punctuation">.</span><span class="token function">execCommand</span><span class="token punctuation">(</span><span class="token string">&quot;copy&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,89),o=[p];function c(i,l){return a(),s("div",null,o)}const r=n(t,[["render",c],["__file","javascriptp1.html.vue"]]);export{r as default};
