import{_ as p,r as o,o as e,c,a as n,d as s,b as l,e as a}from"./app-lzSeYDl-.js";const i={},u=a(`<h1 id="react-常见问题点-一" tabindex="-1"><a class="header-anchor" href="#react-常见问题点-一" aria-hidden="true">#</a> React 常见问题点(一)</h1><h2 id="hooks-、useeffect、-uselayouteffect" tabindex="-1"><a class="header-anchor" href="#hooks-、useeffect、-uselayouteffect" aria-hidden="true">#</a> hooks 、useEffect、 useLayoutEffect</h2><p><code>React Hooks</code> 是 React 16.8 引入的一组函数，用于<strong>让函数组件拥有类组件的状态管理和生命周期方法</strong>的能力。其中，<code>useEffect</code> 和 <code>useLayoutEffect</code> 是两个用于 <em>处理副作用</em>（如数据获取、订阅、手动 DOM 操作等）的钩子，而 <code>useMemo</code> 和 <code>useCallback</code> 则用于优化性能。</p><p><strong><em>useEffect</em></strong> : <code>useEffect</code> 是 React 提供的用于在函数组件中处理副作用的 Hook。它在组件渲染后执行，可以用于处理诸如数据获取、订阅、DOM 操作等副作用任务。useEffect 接受两个参数：<strong>一个函数</strong>和<strong>一个依赖数组</strong>。</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">function</span> <span class="token function">Bar</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 在组件渲染后执行的副作用代码</span>
    document<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Count: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>count<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 仅在 count 改变时执行</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Count: </span><span class="token punctuation">{</span>count<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Increment</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> Bar<span class="token punctuation">;</span>
</code></pre><div class="highlight-lines"><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong><em>useLayoutEffect</em></strong> : <code>useLayoutEffect</code> 与 useEffect 类似，但它会在 <strong>DOM 更新之后、浏览器 layout 之前</strong>执行。这使得它更适合一些需要立即操作 DOM <code>的情况。useLayoutEffect</code> 的使用方式与 useEffect 相同，只是它会更快地执行副作用代码。</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">function</span> <span class="token function">Bar</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>width<span class="token punctuation">,</span> setWidth<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">useLayoutEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// DOM 更新之后、浏览器 layout 之前执行</span>
    <span class="token keyword">function</span> <span class="token function">updateWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">setWidth</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>innerWidth<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;resize&quot;</span><span class="token punctuation">,</span> updateWidth<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">updateWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 确保在渲染前更新宽度</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;resize&quot;</span><span class="token punctuation">,</span> updateWidth<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>width<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Window width: </span><span class="token punctuation">{</span>width<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// useLayoutEffect 用于监听窗口大小的变化，并实时更新 width 变量</span>
</code></pre><div class="highlight-lines"><br><br><br><div class="highlight-line"> </div><br><br><br><br><div class="highlight-line"> </div><br><div class="highlight-line"> </div><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意的是，由于 <code>useLayoutEffect</code> 可能会对性能造成影响，因此建议仅在确实需要 <strong>同步 DOM</strong> 操作的情况下使用它，否则使用 useEffect 更合适。 React 文档建议，如果不需要立即执行的 DOM 操作，应首选使用 useEffect。</p><h2 id="react-组件优化" tabindex="-1"><a class="header-anchor" href="#react-组件优化" aria-hidden="true">#</a> React 组件优化</h2><p>React 组件优化是一项重要的任务，可以提高应用程序的性能和用户体验。以下是一些常见的 React 组件优化技巧：</p>`,10),r=a('<li><ol><li><strong>使用函数组件和 React Hooks</strong>：</li></ol><ul><li>函数组件通常比类组件具有更好的性能，因为它们更轻量化。</li><li>使用 React Hooks（如 <code>useState</code>、<code>useEffect</code>、<code>useMemo</code>）来管理组件的状态和副作用，以减少不必要的渲染。</li></ul></li><li><ol start="2"><li><strong>避免不必要的渲染</strong>：</li></ol><ul><li>使用 <code>shouldComponentUpdate</code> 方法或 <code>React.memo</code> 高阶组件来防止不必要的组件渲染。</li><li>使用 <code>PureComponent</code> 或 <code>React.memo</code> 来避免在 props 或 state 没有变化时触发的渲染。</li></ul></li><li><ol start="3"><li><strong>使用 React 的异步更新机制</strong>：</li></ol><ul><li>使用 <code>setState</code> 的回调函数或者 <code>useEffect</code> 来确保在组件状态更新后进行相应的操作，而不会触发额外的渲染。</li></ul></li><li><ol start="4"><li><strong>避免内联函数</strong>：</li></ol><ul><li>避免在渲染方法中创建内联函数，因为它们可能会导致不必要的函数重复创建。可以将这些函数提升到组件的构造函数或使用 <code>useCallback</code> 来进行优化。</li></ul></li><li><ol start="5"><li><strong>分割大型组件</strong>：</li></ol><ul><li>如果一个组件变得过于复杂，可以将其<strong>拆分</strong>成多个小型组件，每个组件专注于特定的任务。</li></ul></li><li><ol start="6"><li><strong>使用列表的 key 属性</strong>：</li></ol><ul><li>在渲染列表时，为每个列表项提供<strong>唯一的</strong> key 属性，以帮助 React 更有效地管理列表项的更新。</li></ul></li><li><ol start="7"><li><strong>懒加载组件</strong>：</li></ol><ul><li>使用 React 的懒加载功能（如 <code>React.lazy</code> 和 <code>Suspense</code>）来按需加载组件，以减少初始加载时的资源占用。</li></ul></li><li><ol start="8"><li><strong>使用 Memoization</strong>：</li></ol><ul><li>使用 <code>useMemo</code> 或 <code>React.memo</code> 来记忆组件的渲染结果，以避免不必要的计算。</li></ul></li><li><ol start="9"><li><strong>性能分析工具</strong>：</li></ol><ul><li>使用 <code>React DevTools</code> 或其他性能分析工具来识别组件渲染的瓶颈，并找出性能问题的根本原因。</li></ul></li><li><ol start="10"><li><strong>服务器端渲染（SSR）</strong>：</li></ol><ul><li>对于需要更快的初始加载时间的应用程序，考虑使用服务器端渲染来提供更快的首次渲染。</li></ul></li><li><ol start="11"><li><strong>使用组件级别的代码拆分</strong>：</li></ol><ul><li>使用动态导入（Dynamic Import）来按需加载组件，以减少初始包大小。</li></ul></li><li><ol start="12"><li><strong>使用 Memo 组件</strong>：</li></ol><ul><li>如果组件有昂贵的计算成本或者渲染成本，可以考虑使用 <code>React.memo</code> 或 <code>useMemo</code> 来缓存组件的输出。</li></ul></li><li><ol start="13"><li><strong>避免不必要的全局状态</strong>：</li></ol><ul><li>避免在全局状态中存储不必要的数据，只在需要的组件中共享状态。</li></ul></li><li><ol start="14"><li><strong>组件的拆分和组合</strong>：</li></ol><ul><li>将复杂的组件拆分为多个小组件，并使用组件的组合来构建界面。</li></ul></li>',14),k={start:"15"},d={href:"https://zh-hans.react.dev/reference/react/Profiler",target:"_blank",rel:"noopener noreferrer"},v=n("ul",null,[n("li",null,[n("code",null,"React Profiler"),s(" 是 React DevTools 的一部分，可用于分析组件的渲染性能，找出哪些组件渲染时间较长。")])],-1),g=a(`<p>React 组件优化是一个持续改进的过程，需要根据具体的应用和性能需求来调整和优化。始终使用性能分析工具来帮助确定优化的地方，并在实际测试中验证性能的改善。</p><h2 id="高阶组件" tabindex="-1"><a class="header-anchor" href="#高阶组件" aria-hidden="true">#</a> 高阶组件</h2><p>高阶组件（Higher-Order Component，<code>HOC</code>）是一种在 React 中用于复用组件逻辑的高级技术。它本质上<strong>是一个函数，接受一个组件作为参数并返回一个新的组件</strong>。高阶组件在 React 应用中非常有用，因为它可以帮助你在不修改原始组件的情况下添加或修改功能。 以下是高阶组件的一些常见用法和示例：</p><ul><li><ol><li><strong>添加新的 Props</strong>：<br> 高阶组件可以接受一些数据，并将其作为 props 传递给包装的组件。这可以用于向组件注入一些共享的数据或配置信息。</li></ol></li></ul><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">const</span> <span class="token function-variable function">withUserData</span> <span class="token operator">=</span> <span class="token punctuation">(</span>WrappedComponent<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> userData <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">30</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">WrappedComponent</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span></span> <span class="token attr-name">userData</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>userData<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">UserComponent</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> userData <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Name: </span><span class="token punctuation">{</span>userData<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Age: </span><span class="token punctuation">{</span>userData<span class="token punctuation">.</span>age<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> UserComponentWithUserData <span class="token operator">=</span> <span class="token function">withUserData</span><span class="token punctuation">(</span>UserComponent<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="highlight-lines"><br><div class="highlight-line"> </div><br><br><div class="highlight-line"> </div><br><br><br><br><br><div class="highlight-line"> </div></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><ol start="2"><li><strong>条件渲染</strong>：<br> 高阶组件可以根据一些条件来决定是否渲染包装组件。这可以用于创建<strong>权限控制</strong>的组件。</li></ol></li></ul><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">const</span> <span class="token function-variable function">withAuthorization</span> <span class="token operator">=</span> <span class="token punctuation">(</span>WrappedComponent<span class="token punctuation">,</span> allowedRoles<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// Check user&#39;s role here</span>
  <span class="token keyword">const</span> userRole <span class="token operator">=</span> <span class="token string">&quot;admin&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> userRole <span class="token operator">===</span> allowedRoles <span class="token operator">?</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">WrappedComponent</span></span> <span class="token punctuation">/&gt;</span></span>
  <span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Access Denied</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">AdminDashboard</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Admin Dashboard</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>
<span class="token keyword">const</span> ProtectedAdminDashboard <span class="token operator">=</span> <span class="token function">withAuthorization</span><span class="token punctuation">(</span>AdminDashboard<span class="token punctuation">,</span> <span class="token string">&quot;admin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="highlight-lines"><br><br><br><div class="highlight-line"> </div><br><br><br><br><br><br><div class="highlight-line"> </div></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><ol start="3"><li><strong>包装组件生命周期方法</strong>：<br> 高阶组件可以包装组件的生命周期方法，以添加额外的行为或副作用。</li></ol></li></ul><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">const</span> <span class="token function-variable function">withLogger</span> <span class="token operator">=</span> <span class="token punctuation">(</span>WrappedComponent<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">class</span> <span class="token class-name"><span class="token keyword">extends</span></span> React<span class="token punctuation">.</span>Component <span class="token punctuation">{</span>
    <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Component did mount&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">WrappedComponent</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">MyComponent</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Hello, World!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>
<span class="token keyword">const</span> MyComponentWithLogger <span class="token operator">=</span> <span class="token function">withLogger</span><span class="token punctuation">(</span>MyComponent<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="highlight-lines"><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><ol start="4"><li><strong>状态管理</strong>：<br> 高阶组件可以用于管理某些状态，将状态传递给包装的组件或在需要时进行更新。</li></ol></li></ul><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">const</span> <span class="token function-variable function">withCounter</span> <span class="token operator">=</span> <span class="token punctuation">(</span>WrappedComponent<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">class</span> <span class="token class-name"><span class="token keyword">extends</span></span> React<span class="token punctuation">.</span>Component <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span> count<span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function-variable function">increment</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> count<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">(</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">WrappedComponent</span></span>
          <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">}</span></span>
          <span class="token attr-name">count</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">}</span></span>
          <span class="token attr-name">increment</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>increment<span class="token punctuation">}</span></span>
        <span class="token punctuation">/&gt;</span></span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">CounterComponent</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> count<span class="token punctuation">,</span> increment <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Count: </span><span class="token punctuation">{</span>count<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>increment<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Increment</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> CounterComponentWithCounter <span class="token operator">=</span> <span class="token function">withCounter</span><span class="token punctuation">(</span>CounterComponent<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="highlight-lines"><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>高阶组件是一种强大的工具，可以帮助你在 React 中实现复杂的功能和逻辑复用。但要小心不要滥用它们，以免导致代码变得复杂难以维护。通常，建议在需要<strong>复用组件逻辑时使用高阶组件</strong>，而在其他情况下优先考虑使用 React Hooks。</p>`,12);function m(b,h){const t=o("ExternalLinkIcon");return e(),c("div",null,[u,n("ul",null,[r,n("li",null,[n("ol",k,[n("li",null,[n("strong",null,[s("使用 "),n("a",d,[s("React Profiler"),l(t)])]),s("：")])]),v])]),g])}const w=p(i,[["render",m],["__file","react_problem.html.vue"]]);export{w as default};
