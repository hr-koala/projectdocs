import{_ as n,o as s,c as a,e as t}from"./app-lzSeYDl-.js";const p={},o=t(`<h2 id="掌握日志记录-深入了解-pino" tabindex="-1"><a class="header-anchor" href="#掌握日志记录-深入了解-pino" aria-hidden="true">#</a> 掌握日志记录：深入了解 Pino</h2><p>https://blog.csdn.net/qq_42880714/article/details/134452707</p><p>掌握日志记录：深入了解 Pino 日志用于查找系统漏洞、执行测试、跟踪和分析应用程序。除了这些优点之外，它们的成本也可能很高，并且会减慢我们的应用程序的速度。因此，我们应该选择一个合适的日志包并明智地使用它。</p><p>在选择日志包时，我们必须注意以下功能：</p><p>必须支持日志级别。 必须能够格式化数据。 必须支持写入多个目的地。 必须能够编辑数据 必须快速完成所有这些工作，以避免增加应用程序的成本</p><p>因此，pino 将是最好的选择。让我们深入研究一下 pino。</p><p>Pino 安装</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>npm i pino pino<span class="token operator">-</span>pretty
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>让我们创建一个名为 logger.js 的文件</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> pino <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;pino&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Pino</span> <span class="token punctuation">{</span>
  <span class="token keyword">static</span> instance<span class="token punctuation">;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Pino<span class="token punctuation">.</span>instance<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      Pino<span class="token punctuation">.</span>instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">pino</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> Pino<span class="token punctuation">.</span>instance<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> logger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Pino</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;first log attempt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在此代码中，我们使用单例模式创建了一个名为 Pino 的类，并进行了第一个日志操作。使用 node logger.js 命令运行此文件后，我们将看到此结果：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span> <span class="token string-property property">&quot;level&quot;</span> <span class="token operator">:</span> <span class="token number">30</span> <span class="token punctuation">,</span> <span class="token string-property property">&quot;time&quot;</span> <span class="token operator">:</span> <span class="token number">1699623758139</span> <span class="token punctuation">,</span> <span class="token string-property property">&quot;pid&quot;</span> <span class="token operator">:</span> <span class="token number">162629</span> <span class="token punctuation">,</span> <span class="token string-property property">&quot;hostname&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;shipentegra-ThinkBook-15-G3-ACL&quot;</span> <span class="token punctuation">,</span> <span class="token string-property property">&quot;msg&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;first log attempt&quot;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>pino 使用我们的消息和一些元数据创建了一个 JSON。</p><p>logger<a href="%5BmergingObject%5D,%5Bmessage%5D">logLevel</a></p><p>日志级别 日志级别用于标识重要性级别和分组操作。Pino 有 6 个日志级别，如下所述，默认日志级别是 info。Pino 打印日志值高于当前日志级别的日志。因此，Pino 不会打印 trace 和 debug 级别</p><table><thead><tr><th>Level</th><th>Value</th></tr></thead><tbody><tr><td>fatal</td><td>60</td></tr><tr><td>error</td><td>50</td></tr><tr><td>warn</td><td>40</td></tr><tr><td>info</td><td>30</td></tr><tr><td>debug</td><td>20</td></tr><tr><td>trace</td><td>10</td></tr></tbody></table><p>运行代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>logger<span class="token punctuation">.</span><span class="token function">fatal</span><span class="token punctuation">(</span><span class="token string">&#39;fatal log&#39;</span><span class="token punctuation">)</span>
logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;error log&#39;</span><span class="token punctuation">)</span>
logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&#39;warn log&#39;</span><span class="token punctuation">)</span>
logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;info log&#39;</span><span class="token punctuation">)</span>
logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&#39;debug log&#39;</span><span class="token punctuation">)</span>
logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">&#39;trace log&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// 结果：</span>
<span class="token punctuation">{</span><span class="token string-property property">&quot;level&quot;</span><span class="token operator">:</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token string-property property">&quot;time&quot;</span><span class="token operator">:</span><span class="token number">1699728817433</span><span class="token punctuation">,</span><span class="token string-property property">&quot;pid&quot;</span><span class="token operator">:</span><span class="token number">44107</span><span class="token punctuation">,</span><span class="token string-property property">&quot;hostname&quot;</span><span class="token operator">:</span><span class="token string">&quot;shipentegra-ThinkBook-15-G3-ACL&quot;</span><span class="token punctuation">,</span><span class="token string-property property">&quot;msg&quot;</span><span class="token operator">:</span><span class="token string">&quot;fatal log&quot;</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token string-property property">&quot;level&quot;</span><span class="token operator">:</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token string-property property">&quot;time&quot;</span><span class="token operator">:</span><span class="token number">1699728817436</span><span class="token punctuation">,</span><span class="token string-property property">&quot;pid&quot;</span><span class="token operator">:</span><span class="token number">44107</span><span class="token punctuation">,</span><span class="token string-property property">&quot;hostname&quot;</span><span class="token operator">:</span><span class="token string">&quot;shipentegra-ThinkBook-15-G3-ACL&quot;</span><span class="token punctuation">,</span><span class="token string-property property">&quot;msg&quot;</span><span class="token operator">:</span><span class="token string">&quot;error log&quot;</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token string-property property">&quot;level&quot;</span><span class="token operator">:</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token string-property property">&quot;time&quot;</span><span class="token operator">:</span><span class="token number">1699728817436</span><span class="token punctuation">,</span><span class="token string-property property">&quot;pid&quot;</span><span class="token operator">:</span><span class="token number">44107</span><span class="token punctuation">,</span><span class="token string-property property">&quot;hostname&quot;</span><span class="token operator">:</span><span class="token string">&quot;shipentegra-ThinkBook-15-G3-ACL&quot;</span><span class="token punctuation">,</span><span class="token string-property property">&quot;msg&quot;</span><span class="token operator">:</span><span class="token string">&quot;warn log&quot;</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token string-property property">&quot;level&quot;</span><span class="token operator">:</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token string-property property">&quot;time&quot;</span><span class="token operator">:</span><span class="token number">1699728817436</span><span class="token punctuation">,</span><span class="token string-property property">&quot;pid&quot;</span><span class="token operator">:</span><span class="token number">44107</span><span class="token punctuation">,</span><span class="token string-property property">&quot;hostname&quot;</span><span class="token operator">:</span><span class="token string">&quot;shipentegra-ThinkBook-15-G3-ACL&quot;</span><span class="token punctuation">,</span><span class="token string-property property">&quot;msg&quot;</span><span class="token operator">:</span><span class="token string">&quot;info log&quot;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>trace 和 debug 日志没有被打印。level 选项用于决定日志级别。</p><p>我们还可以使用 customLevels 选项添加自定义级别，并使用 useOnlyCustomLevels 选项禁用所有默认级别。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> pino <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;pino&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Pino</span> <span class="token punctuation">{</span>
  <span class="token keyword">static</span> instance<span class="token punctuation">;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Pino<span class="token punctuation">.</span>instance<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      Pino<span class="token punctuation">.</span>instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">pino</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">transport</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">&quot;pino-pretty&quot;</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token literal-property property">customLevels</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">urgent</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> Pino<span class="token punctuation">.</span>instance<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> logger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Pino</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
logger<span class="token punctuation">.</span><span class="token function">urgent</span><span class="token punctuation">(</span><span class="token string">&quot;urgent log&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Pino-Pretty 在开发过程中，我们可以使用 pino-pretty 来美化我们的日志。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Pino<span class="token punctuation">.</span>instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">pino</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">transport</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">&quot;pino-pretty&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当文件运行时，结果将是：</p><p>20:42:37.180] INFO (32813): example of pino-pretty</p><p>格式化元数据 默认情况下，hostname 和 pid 将添加到所有日志中。要修改这些键或添加新键，可以使用 bindings 字段。此外，可以使用 level 选项修改 level 值。此外，使用 timestamp 选项，我们可以删除 time 或修改时间格式：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token string-property property">&quot;level&quot;</span><span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;time&quot;</span><span class="token operator">:</span> <span class="token number">1699811309472</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;pid&quot;</span><span class="token operator">:</span> <span class="token number">36483</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;hostname&quot;</span><span class="token operator">:</span> <span class="token string">&quot;shipentegra-ThinkBook-15-G3-ACL&quot;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;msg&quot;</span><span class="token operator">:</span> <span class="token string">&quot;example of pino-pretty&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们删除了 hostname 键并修改了级别和时间键，所以结果将是：</p><p>{ &quot;level&quot; : &quot;info(30)&quot; , &quot;time&quot; : &quot;2023-11-12T18:02:57.315Z&quot; , &quot;pid&quot; : 44768 , &quot;msg&quot; : &quot;hi world&quot; }</p><p>子日志 它用于将公共数据传输到它自己创建的所有日志中。</p><p>让我们创建一个名为 getUser 的函数，该函数将获取一个 id 值并控制用户。我们可以使用 child 方法来传递公共数据，而不是向每个日志操作添加角色和 id。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">getUser</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> child <span class="token operator">=</span> logger<span class="token punctuation">.</span><span class="token function">child</span><span class="token punctuation">(</span><span class="token punctuation">{</span> id<span class="token punctuation">,</span><span class="token literal-property property">role</span><span class="token operator">:</span><span class="token string">&quot;admin&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        child<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;user found&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        child<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;user not found&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token function">getUser</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token comment">// 结果将是：</span>
<span class="token punctuation">{</span><span class="token string-property property">&quot;level&quot;</span><span class="token operator">:</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token string-property property">&quot;time&quot;</span><span class="token operator">:</span><span class="token number">1699812520213</span><span class="token punctuation">,</span><span class="token string-property property">&quot;pid&quot;</span><span class="token operator">:</span><span class="token number">48074</span><span class="token punctuation">,</span><span class="token string-property property">&quot;hostname&quot;</span><span class="token operator">:</span><span class="token string">&quot;shipentegra-ThinkBook-15-G3-ACL&quot;</span><span class="token punctuation">,</span><span class="token string-property property">&quot;id&quot;</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string-property property">&quot;role&quot;</span><span class="token operator">:</span><span class="token string">&quot;admin&quot;</span><span class="token punctuation">,</span><span class="token string-property property">&quot;msg&quot;</span><span class="token operator">:</span><span class="token string">&quot;user not found&quot;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>错误信息 当错误传递给 Pino 时，它会准确地序列化错误并将数据放入“err”键中。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;Something went wrong&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// 结果将是：</span>

<span class="token punctuation">{</span>
  <span class="token string-property property">&quot;level&quot;</span><span class="token operator">:</span> <span class="token number">50</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;time&quot;</span><span class="token operator">:</span> <span class="token number">1699699745847</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;pid&quot;</span><span class="token operator">:</span> <span class="token number">32206</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;hostname&quot;</span><span class="token operator">:</span> <span class="token string">&quot;shipentegra-ThinkBook-15-G3-ACL&quot;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;err&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Error&quot;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;message&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Something went wrong&quot;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;stack&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Error: Something went wrong\\n    at Object.&lt;anonymous&gt; (/home/shipentegra/works/pod-worker/logger.js:22:14)\\n    at Module._compile (node:internal/modules/cjs/loader:1103:14)\\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1155:10)\\n    at Module.load (node:internal/modules/cjs/loader:981:32)\\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:77:12)\\n    at node:internal/main/run_main_module:17:47&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;msg&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Something went wrong&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>传输 传输功能用于将日志写入文件或将其传输到 Redis 或 MySQL 中。Pino 有两种不同的传输方式：</p><p>pino.transport：这是默认的传输选项。它利用工作线程来避免阻塞主线程，从而使用此选项可以更快地执行代码。然而，这会给服务器带来额外的成本，因为日志数据必须从主线程传输到工作线程 pino.destionation：是在主线程中进行日志操作的遗留解决方案。除了复杂的日志操作之外，建议使用它。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>   Pino<span class="token punctuation">.</span>instance <span class="token operator">=</span> <span class="token keyword">new</span>  <span class="token class-name">pino</span> <span class="token punctuation">(</span>pino<span class="token punctuation">.</span><span class="token function">transport</span> <span class="token punctuation">(</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">target</span> <span class="token operator">:</span> <span class="token string">&#39;pino/file&#39;</span> <span class="token punctuation">,</span>
        <span class="token literal-property property">options</span> <span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">destination</span> <span class="token operator">:</span> <span class="token function">join</span> <span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;logs/dev.log&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的代码中，我们使用 pino.transport 方法将日志写入 logs/dev.log 文件。然而，当我们运行代码时，出现了错误，因为默认情况下，Pino 假定日志目录存在。为了避免此错误，我们可以手动创建目录或使用 mkdir 允许 Pino 创建目录的选项。</p><p>完成之后我们就可以看到日志顺利写入到 dev.log 文件中。</p><p>每次运行代码时，我们都会看到日志被添加到日志文件的末尾。要在启动项目时删除旧日志并从头开始写入日志，我们可以使用 append:false 选项。</p><p>我们可以创建两个不同的文件，分别称为“所有日志”和“错误日志”，将所有日志添加到“所有日志”文件中：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Pino<span class="token punctuation">.</span>instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">pino</span><span class="token punctuation">(</span>
  pino<span class="token punctuation">.</span><span class="token function">transport</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">targets</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">&quot;pino/file&quot;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">mkdir</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
          <span class="token literal-property property">destination</span><span class="token operator">:</span> <span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;logs/allLogs&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">&quot;pino/file&quot;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">level</span><span class="token operator">:</span> <span class="token string">&quot;error&quot;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">mkdir</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
          <span class="token literal-property property">destination</span><span class="token operator">:</span> <span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;logs/errorLogs&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用此代码，所有日志将写入所有日志文件，而致命和错误日志将写入错误日志文件。</p><p>日志编辑 Pino 使用 fast-redact 包标记敏感数据，以提供安全性。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Pino<span class="token punctuation">.</span>instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">pino</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">redact</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;access_token&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;secret_token&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;password&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;stores[*].access_token&#39;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">password</span><span class="token operator">:</span><span class="token string">&quot;cibilex&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">access_token</span><span class="token operator">:</span> <span class="token string">&quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJodHRwczovL2V4YW1wbGUuYXV0aDAuY29tLyIsImF1ZCI6Imh0dHBzOi8vYXBpLmV4YW1wbGUuY29tL2NhbGFuZGFyL3YxLyIsInN1YiI6InVzcl8xMjMiLCJpYXQiOjE0NTg3ODU3OTYsImV4cCI6MTQ1ODg3MjE5Nn0.CA7eaHjIHz5NxeIJoFK9krqaeZrPLwmMmgI_XiQiIkQ&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">user</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">password</span><span class="token operator">:</span><span class="token string">&quot;cibilex&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">stores</span><span class="token operator">:</span><span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
            <span class="token literal-property property">access_token</span><span class="token operator">:</span><span class="token string">&quot;storeAccessToken&quot;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 运行上述代码采样时，结果将是：</span>

<span class="token punctuation">{</span> “级别” ：<span class="token number">30</span> ，“时间” ：<span class="token number">1699705824035</span> ，“pid” ：<span class="token number">31614</span> ，“主机名” ：“shipentegra<span class="token operator">-</span>ThinkBook<span class="token operator">-</span><span class="token number">15</span><span class="token operator">-</span><span class="token constant">G3</span><span class="token operator">-</span><span class="token constant">ACL</span>” ，“密码” ：“<span class="token punctuation">[</span>已编辑<span class="token punctuation">]</span>” ，“access_token” ：“ <span class="token punctuation">[</span>已编辑<span class="token punctuation">]</span><span class="token string">&quot; , &quot;</span>stores<span class="token string">&quot; : [ { &quot;</span>access_token<span class="token string">&quot; : &quot;</span><span class="token punctuation">[</span>已编辑<span class="token punctuation">]</span>&quot; <span class="token punctuation">}</span> <span class="token punctuation">]</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>就这样，我们了解了 Pino 的大部分功能。</p>`,46),e=[o];function c(i,l){return s(),a("div",null,e)}const u=n(p,[["render",c],["__file","pinojs.html.vue"]]);export{u as default};
