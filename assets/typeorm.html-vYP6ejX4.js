import{_ as n,o as s,c as a,e as t}from"./app-lzSeYDl-.js";const p={},e=t(`<h1 id="typeorm-框架" tabindex="-1"><a class="header-anchor" href="#typeorm-框架" aria-hidden="true">#</a> TypeORM 框架</h1><ol><li><p>安装 TypeORM: npm install typeorm --save</p></li><li><p>需要安装依赖模块 reflect-metadata : npm install reflect-metadata --save</p></li><li><p>在应用里全局引用一下: 比如在 app.ts 的入口处 require(&quot;reflect-metadata&quot;)</p></li><li><p>你可能需要安装 node 类型： npm install @types/node --save</p></li><li><p>安装数据库驱动:</p></li></ol><ul><li><p>MySQL 或 MariaDB npm install mysql --save</p></li><li><p>PostgreSQL npm install pg --save</p></li><li><p>SQLite npm install sqlite3 --save</p></li><li><p>Microsoft SQL Server npm install mssql --save</p></li><li><p>sql.js npm install sql.js --save</p></li><li><p>Oracle (experimental) npm install oracledb --save 可以根据你的数据库选择安装上面的任意一个.</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// https://juejin.cn/post/6844903920578330631</span>
<span class="token comment">// 全局安装TypeORM：</span>
npm install typeorm <span class="token operator">-</span>g
<span class="token comment">// 到新项目的目录并运行该命令：</span>
typeorm init <span class="token operator">--</span>name MyProject <span class="token operator">--</span>database mysql
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="typeorm-框架中的-find-查询中的基础选项和进阶选项" tabindex="-1"><a class="header-anchor" href="#typeorm-框架中的-find-查询中的基础选项和进阶选项" aria-hidden="true">#</a> TypeORM 框架中的 Find 查询中的基础选项和进阶选项</h2><ul><li>select - 指定要查询的实体对象的属性</li></ul><p>如果省略 select 属性，则默认查询所有实体对象的所有属性</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createConnection <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;typeorm&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> User <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./entity/User&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 创建数据库</span>
<span class="token function">createConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">connection</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 获取数据库中的数据</span>
  <span class="token keyword">const</span> userRepository <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">Repository</span><span class="token punctuation">(</span>User<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 查询User表中名为 firstName 和 lastName 列的数据，并返回</span>
  userRepository<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">select</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;firstName&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;lastName&quot;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>relations - 查询结果中包含的关联实体对象</li></ul><p>在返回的结果中，包含关联的实体对象（返回的是整个实体对象）</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createConnection <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;typeorm&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> User <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./entity/User&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 创建数据库</span>
<span class="token function">createConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">connection</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 获取数据库中的数据</span>
  <span class="token keyword">const</span> userRepository <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">Repository</span><span class="token punctuation">(</span>User<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 查询与主实体对象（User）关联的\`profile\`、\`photos\`和\`videos\`实体对象</span>
  userRepository<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">relations</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;profile&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;photos&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;videos&quot;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果需要在查询时，同时想加载关联的实体对象和它们的属性，用外连接 leftJoinAndSelect()方法或内连接 innerJoinAndSelect()方法，就会在结果中得到关联表对象的值。</p><ul><li>join - 指定关联实体对象的查询方式</li></ul><p>alias 属性指定主实体对象的别名 leftJoinAndSelect 属性是一个对象，用于指定要查询的关联实体对象及其属性</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createConnection <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;typeorm&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> User <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./entity/User&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 创建数据库</span>
<span class="token function">createConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">connection</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 获取数据库中的数据</span>
  <span class="token keyword">const</span> userRepository <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">Repository</span><span class="token punctuation">(</span>User<span class="token punctuation">)</span><span class="token punctuation">;</span>

  userRepository<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">join</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">alias</span><span class="token operator">:</span> <span class="token string">&quot;user&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">leftJoinAndSelect</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">profile</span><span class="token operator">:</span> <span class="token string">&quot;user.profile&quot;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">photo</span><span class="token operator">:</span> <span class="token string">&quot;user.photos&quot;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">video</span><span class="token operator">:</span> <span class="token string">&quot;user.videos&quot;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>alias 属性的值为 user，表示查询的是 userRepository 所管理的实体对象。leftJoinAndSelect 属性是一个包含 profile、photo 和 video 属性的对象，每个属性都表示要查询的关联实体对象及其在查询结果中的别名。例如，&quot;user.profile&quot;表示查询与 user 实体对象关联的 profile 实体对象，并将其在查询结果中的别名设置为 profile。</p><ul><li>where -查询实体的简单条件</li></ul><p>where 的值是一个包含一个或多个查询条件的数组，每个条件可以是一个简单的对象，也可以是一个包含运算符的对象，还可以使用逻辑运算符和括号来组合多个条件。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 查询 firstName 为 Timber 同时 lastName 为 Saw 的数据</span>
userRepository<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">where</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">firstName</span><span class="token operator">:</span> <span class="token string">&quot;Timber&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">lastName</span><span class="token operator">:</span> <span class="token string">&quot;Saw&quot;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>查询嵌入实体列应该根据定义它的层次结构来完成</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 查询属性中的属性值，符合条件的数据</span>
userRepository<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">where</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">first</span><span class="token operator">:</span> <span class="token string">&quot;Timber&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">last</span><span class="token operator">:</span> <span class="token string">&quot;Saw&quot;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 OR 运算符查询</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>userRepository<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token comment">// 表示查询结果为，满足两个对象条件的其中一个即可</span>
    <span class="token literal-property property">where</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token literal-property property">firstName</span><span class="token operator">:</span> <span class="token string">&quot;Timber&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">lastName</span><span class="token operator">:</span> <span class="token string">&quot;Saw&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">firstName</span><span class="token operator">:</span> <span class="token string">&quot;Stan&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">lastName</span><span class="token operator">:</span> <span class="token string">&quot;Lee&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">]</span>
    <span class="token comment">// 表示要查询\`age\`大于18的实体对象</span>
    <span class="token literal-property property">where</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token function">MoreThan</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>order - 选择排序</li></ul><p>排序方式有两种：升序（ASC）和降序（DESC） order 方法接受一个字符串、对象或数组参数，用于指定排序方式</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 按照\`firstName\`属性的升序排列查询结果</span>
userRepository<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">order</span><span class="token operator">:</span> <span class="token string">&quot;firstName&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 按照\`firstName\`属性的升序和\`lastName\`属性的降序排列查询结果</span>
userRepository<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">order</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">firstName</span><span class="token operator">:</span> <span class="token string">&quot;ASC&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">lastName</span><span class="token operator">:</span> <span class="token string">&quot;DESC&quot;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 按照\`firstName\`属性的升序和\`lastName\`属性的升序排列查询结果</span>
userRepository<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">order</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;firstName&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;lastName&quot;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>skip - 指定查询结果的起始位置</li></ul><p>它的值为一个数字，表示要跳过的记录数，设置为 0 表示从查询结果的第一条记录开始返回结果。</p><ul><li>take - 指定查询结果的数量（分页，设置每一页返回多少）</li></ul><p>它的值为一个数字，表示要返回的记录数。设置为 10 表示返回最多 10 条记录。 需要注意的是，分页查询时应根据实际情况设置 skip 和 take 属性的值。如果不设置 take 属性，则将返回所有满足条件的记录。如果设置 skip 属性的值大于查询结果的总记录数，则将返回一个空数组。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>userRepository<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">order</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">columnName</span><span class="token operator">:</span> <span class="token string">&quot;ASC&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">skip</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
  <span class="token literal-property property">take</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>cache -启用或禁用查询结果缓存</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>userRepository<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">// true查询结果缓存，false不缓存</span>
  <span class="token literal-property property">cache</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>TypeORM 提供了许多内置运算符，可用于创建更复杂的查询</p><ul><li>Not - 表示不等于指定值</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Not <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;typeorm&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 查询 \`Post\` 实体对象中 \`title\` 不等于 \`&quot;About&quot;\` 的所有记录</span>
<span class="token keyword">const</span> loadedPosts <span class="token operator">=</span> <span class="token keyword">await</span> connection<span class="token punctuation">.</span><span class="token function">getRepository</span><span class="token punctuation">(</span>Post<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token function">Not</span><span class="token punctuation">(</span><span class="token string">&quot;About&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>LessThan - 小于指定值</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> LessThan <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;typeorm&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> loadedPosts <span class="token operator">=</span> <span class="token keyword">await</span> connection<span class="token punctuation">.</span><span class="token function">getRepository</span><span class="token punctuation">(</span>Post<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">// 查询 \`Post\` 实体对象中 \`likes\` 小于 \`10\` 的所有记录</span>
  <span class="token literal-property property">likes</span><span class="token operator">:</span> <span class="token function">LessThan</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>LessThanOrEqual - 小于等于指定值</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> LessThanOrEqual <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;typeorm&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> loadedPosts <span class="token operator">=</span> <span class="token keyword">await</span> connection<span class="token punctuation">.</span><span class="token function">getRepository</span><span class="token punctuation">(</span>Post<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">// 查询 \`Post\` 实体对象中 \`LessThanOrEqual\` 小于等于 \`10\` 的所有记录</span>
  <span class="token literal-property property">likes</span><span class="token operator">:</span> <span class="token function">LessThanOrEqual</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>MoreThan - 大于指定值</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> MoreThan <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;typeorm&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> loadedPosts <span class="token operator">=</span> <span class="token keyword">await</span> connection<span class="token punctuation">.</span><span class="token function">getRepository</span><span class="token punctuation">(</span>Post<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">// 查询 \`Post\` 实体对象中 \`likes\` 大于 \`5\` 的所有记录</span>
  <span class="token literal-property property">likes</span><span class="token operator">:</span> <span class="token function">MoreThan</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>MoreThanOrEqual - 大于等于指定值</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> MoreThanOrEqual <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;typeorm&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> loadedPosts <span class="token operator">=</span> <span class="token keyword">await</span> connection<span class="token punctuation">.</span><span class="token function">getRepository</span><span class="token punctuation">(</span>Post<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">// 查询 \`Post\` 实体对象中 \`likes\` 大于等于 \`5\` 的所有记录</span>
  <span class="token literal-property property">likes</span><span class="token operator">:</span> <span class="token function">MoreThanOrEqual</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Equal - 等于指定值</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Equal <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;typeorm&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> loadedPosts <span class="token operator">=</span> <span class="token keyword">await</span> connection<span class="token punctuation">.</span><span class="token function">getRepository</span><span class="token punctuation">(</span>Post<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">// 查询 \`Post\` 实体对象中 \`likes\` 等于 \`8\` 的所有记录</span>
  <span class="token literal-property property">likes</span><span class="token operator">:</span> <span class="token function">Equal</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Like - 指定字符串模式匹配</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Like <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;typeorm&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> loadedPosts <span class="token operator">=</span> <span class="token keyword">await</span> connection<span class="token punctuation">.</span><span class="token function">getRepository</span><span class="token punctuation">(</span>Post<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">// 查询 \`Post\` 实体对象中 \`title\` 字符串中包含 \`abc\` 的所有记录</span>
  <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token function">Like</span><span class="token punctuation">(</span><span class="token string">&quot;% abc %&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>ILike - 表示指定（忽略字符串的大小写）模式匹配</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> ILike <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;typeorm&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> loadedPosts <span class="token operator">=</span> <span class="token keyword">await</span> connection<span class="token punctuation">.</span><span class="token function">getRepository</span><span class="token punctuation">(</span>Post<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">// 查询 \`Post\` 实体对象中 \`title\` 字符串中 忽略大小写后 包含 \`abc\` 的所有记录</span>
  <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token function">ILike</span><span class="token punctuation">(</span><span class="token string">&quot;% abc %&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Between - 表示在指定范围内</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Between <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;typeorm&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> loadedPosts <span class="token operator">=</span> <span class="token keyword">await</span> connection<span class="token punctuation">.</span><span class="token function">getRepository</span><span class="token punctuation">(</span>Post<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">// 查询 \`Post\` 实体对象中 \`math\`数值在 1到10 之间的所有记录</span>
  <span class="token literal-property property">math</span><span class="token operator">:</span> <span class="token function">Between</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>In - 表示查询属性值，是 In 数组中选项的记录</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> In <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;typeorm&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> loadedPosts <span class="token operator">=</span> <span class="token keyword">await</span> connection<span class="token punctuation">.</span><span class="token function">getRepository</span><span class="token punctuation">(</span>Post<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">// 查询 \`Post\` 实体对象中 \`title\`属性值为 &quot;About2&quot;和&quot;About3&quot; 的所有记录</span>
  <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token function">In</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;About2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;About3&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Any - 表示查询属性值等于指定数组中任意一个元素的记录</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Any <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;typeorm&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> loadedPosts <span class="token operator">=</span> <span class="token keyword">await</span> connection<span class="token punctuation">.</span><span class="token function">getRepository</span><span class="token punctuation">(</span>Post<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">// 查询 \`Post\` 实体对象中 \`title\`属性值为 &quot;About2&quot;或&quot;About3&quot; 的所有记录</span>
  <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token function">Any</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;About2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;About3&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>IsNull 表示为空</li><li>NotNull 表示不为空</li><li>Raw 内置运算符可以直接接受 SQL 字符串作为查询条件，可以实现更复杂的查询条件</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Raw <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;typeorm&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> loadedPosts <span class="token operator">=</span> <span class="token keyword">await</span> connection<span class="token punctuation">.</span><span class="token function">getRepository</span><span class="token punctuation">(</span>Post<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">// 查询 \`likes\` 属性值加 1 等于 4 的所有记录</span>
  <span class="token literal-property property">likes</span><span class="token operator">:</span> <span class="token function">Raw</span><span class="token punctuation">(</span><span class="token string">&quot;1 + likes = 4&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>总结性案例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> queryBuild <span class="token operator">=</span> db<span class="token punctuation">.</span>manager
  <span class="token punctuation">.</span><span class="token function">getRepository</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">createQueryBuilder</span><span class="token punctuation">(</span><span class="token string">&quot;f&quot;</span><span class="token punctuation">)</span>
  <span class="token comment">// 连接faqAnswers表，别名为 a,将user的tenantIds属性值，传入faqAnswers表</span>
  <span class="token punctuation">.</span><span class="token function">leftJoinAndSelect</span><span class="token punctuation">(</span><span class="token string">&quot;f.faqAnswers&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;a.tenantId in (:...tenantIds)&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    tenantIds<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token comment">// 连接faqRelations表，取别名为 r</span>
  <span class="token punctuation">.</span><span class="token function">leftJoin</span><span class="token punctuation">(</span><span class="token string">&quot;f.faqRelations&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;r&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">leftJoin</span><span class="token punctuation">(</span><span class="token string">&quot;a.faqLabels&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;al&quot;</span><span class="token punctuation">)</span>
  <span class="token comment">// 查询\`user\`实体类的\`id\`属性等于\`id\`</span>
  <span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string">&quot;f.id = :id&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> id <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token comment">// 指定查询返回的结果，就是几天表中的 下面的属性</span>
  <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    <span class="token string">&quot;f.id&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;f.question&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;f.validBeginTime&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;f.validEndTime&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;f.link&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;f.status&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;f.CategoryId&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;f.tenantId&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;a.id&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;a.answer&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;a.link&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;a.status&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;a.FaqId&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;a.tenantId&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;al.LabelId&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token literal-property property">faq</span><span class="token operator">:</span> any <span class="token operator">&amp;</span> Faq <span class="token operator">=</span> <span class="token keyword">await</span> queryBuild<span class="token punctuation">.</span><span class="token function">getOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>1 .getRepository(user) 使用 user 实体类的仓库对象作为查询的起点，返回一个 QueryBuilder 对象。</p><p>2 .createQueryBuilder(&quot;f&quot;) 在 user 实体类的仓库对象上创建一个查询构建器对象，并指定别名为 f。</p><p>3 .leftJoinAndSelect(&quot;f.faqAnswers&quot;, &quot;a&quot;, &quot;a.tenantId in (:...tenantIds)&quot;, {tenantIds}) 执行一个左连接，连接 user 实体类的 faqAnswers 属性，使用别名 a 表示连接后的结果，&quot;a.tenantId in (:...tenantIds)&quot;表示连接条件，将 tenantIds 中的值作为连接条件的参数传入。</p><p>4 .leftJoin(&quot;f.faqRelations&quot;, &quot;r&quot;) 执行一个左连接，连接 user 实体类的 faqRelations 属性，使用别名 r 表示连接后的结果。</p><p>5 .leftJoin(&quot;a.faqLabels&quot;, &quot;al&quot;) 执行一个左连接，连接 faqAnswers 实体类的 faqLabels 属性，使用别名 al 表示连接后的结果。</p><p>6 .where(&quot;f.id = :id&quot;, { id }) 添加查询条件，查询 user 实体类的 id 属性等于 id。</p><p>7 .select([...]) 指定查询的结果集，包含了 Faq 实体类和 faqAnswers 实体类的所有属性，以及 faqLabels 实体类的 LabelId 属性。</p><p>8 const fff: any &amp; user = await queryBuild.getOne(); 执行查询并获取查询结果，将查询结果赋值给 fff 变量。getOne()方法表示只获取一条满足查询条件的数据，返回一个 Promise 对象，查询结果的类型为 any &amp; user，即 user 实体类的所有属性加上 any 类型。</p>`,68),o=[e];function c(i,l){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","typeorm.html.vue"]]);export{r as default};
