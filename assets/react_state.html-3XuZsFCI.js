import{_ as n,o as s,c as a,e as t}from"./app-lzSeYDl-.js";const e="/images/react/react3.png",p={},o=t('<h1 id="react-数据管理" tabindex="-1"><a class="header-anchor" href="#react-数据管理" aria-hidden="true">#</a> React 数据管理</h1><h2 id="react-setstate-调用的原理" tabindex="-1"><a class="header-anchor" href="#react-setstate-调用的原理" aria-hidden="true">#</a> React setState 调用的原理</h2><p>React 在实现<code>setState</code>异步采用<strong>批量更新</strong>操作(避免频繁的<code>re-render</code>)，使用一个<strong>队列</strong>把他存起来，每次进来一个 <code>setState</code>，就进行入队操作，等时机成熟，把 <code>state</code> 的值做合并，<strong>[</strong> 最后只针对最新的 <code>state</code> 值走一次更新流程。<strong>]</strong></p><p><img src="'+e+`" alt="React setState 调用的原理"></p><p>具体的执行过程如下（源码级解析）：</p><ul><li>首先调用了 <code>setState</code> 入口函数，入口函数在这里就是充当一个分发器的角色，根据入参的不同，将其分发到不同的功能函数中去；</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>ReactComponent<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">setState</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>partialState<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>updater<span class="token punctuation">.</span><span class="token function">enqueueSetState</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> partialState<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>updater<span class="token punctuation">.</span><span class="token function">enqueueCallback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> callback<span class="token punctuation">,</span> <span class="token string">&quot;setState&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="highlight-lines"><br><div class="highlight-line"> </div><br><div class="highlight-line"> </div><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>enqueueSetState</code> 方法将新的 <code>state</code> 放进组件的状态<strong>队</strong>列里，并调用 <code>enqueueUpdate</code> 来处理将要更新的实例对象；</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token function-variable function">enqueueSetState</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>publicInstance<span class="token punctuation">,</span> partialState<span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token comment">// 根据 this 拿到对应的组件实例</span>
 <span class="token keyword">var</span> internalInstance <span class="token operator">=</span> <span class="token function">getInternalInstanceReadyForUpdate</span><span class="token punctuation">(</span>publicInstance<span class="token punctuation">,</span> <span class="token string">&#39;setState&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token comment">// 这个 queue 对应的就是一个组件实例的 state 数组</span>
 <span class="token keyword">var</span> queue <span class="token operator">=</span> internalInstance<span class="token punctuation">.</span>_pendingStateQueue <span class="token operator">||</span> <span class="token punctuation">(</span>internalInstance<span class="token punctuation">.</span>_pendingStateQueue <span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
 queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>partialState<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token comment">// enqueueUpdate 用来处理当前的组件实例</span>
 <span class="token function">enqueueUpdate</span><span class="token punctuation">(</span>internalInstance<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><br><div class="highlight-line"> </div><br><br><div class="highlight-line"> </div><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在 <code>enqueueUpdate</code> 方法中引出了一个关键的对象—— <code>batchingStrategy</code> ，该对象所具备的 <code>isBatchingUpdates</code> 属性直接决定了当下是要走更新流程，还是应该排队等待；如果轮到执行，就调用 <code>batchedUpdates</code> 方法来直接发起更新流程。由此可以推测， <code>batchingStrategy</code> 或许正是 React 内部专门用于管控批量更新的对象。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">enqueueUpdate</span><span class="token punctuation">(</span><span class="token parameter">component</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">ensureInjected</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 注意这一句是问题的关键，isBatchingUpdates标识着当前是否处于批量创建/更新组件的阶段</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>batchingStrategy<span class="token punctuation">.</span>isBatchingUpdates<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 若当前没有处于批量创建/更新组件的阶段，则立即更新组件</span>
    batchingStrategy<span class="token punctuation">.</span><span class="token function">batchedUpdates</span><span class="token punctuation">(</span>enqueueUpdate<span class="token punctuation">,</span> component<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 否则，先把组件塞入 dirtyComponents 队列里，让它“再等等”</span>
  dirtyComponents<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>component<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>component<span class="token punctuation">.</span>_updateBatchNumber <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    component<span class="token punctuation">.</span>_updateBatchNumber <span class="token operator">=</span> updateBatchNumber <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><br><br><div class="highlight-line"> </div><br><div class="highlight-line"> </div><br><br><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意</strong>： <code>batchingStrategy</code> 对象可以理解为“<strong>锁管理器</strong>”。这里的“锁”，是指 React 全局唯一的 <code>isBatchingUpdates</code> 变量， <code>isBatchingUpdates</code> 的初始值是 <code>false</code> ，意味着“当前并未进行任何批量更新操作”。每当 React 调用 <code>batchedUpdate</code> 去执行更新动作时，会先把这个锁给“锁上”（置为 <code>true</code> ），表明“现在正处于批量更新过程中”。当锁被“锁上”的时候，任何需要更新的组件都只能暂时进入 <code>dirtyComponents</code> 里排队等候下一次的批量更新，而不能随意“插队”。此处体现的“<strong>任务锁</strong>”的思想，是 React 面对大量状态仍然能够实现<strong>有序分批</strong>处理的基石。</p><p>锁是指 React 全局唯一的 <code>isBatchingUpdates</code> 变量</p><h3 id="如何在如上异步环境下-继续开启批量更新模式呢" tabindex="-1"><a class="header-anchor" href="#如何在如上异步环境下-继续开启批量更新模式呢" aria-hidden="true">#</a> 如何在如上异步环境下，继续开启批量更新模式呢？</h3><p><code>React-Dom</code> 中提供了批量更新方法 <code>unstable_batchedUpdates</code>，可以去手动批量更新，可以将上述 <code>setTimeout</code> 里面的内容做如下修改:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">&quot;react-dom&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> unstable_batchedUpdates <span class="token punctuation">}</span> <span class="token operator">=</span> ReactDOM<span class="token punctuation">;</span>

<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">unstable_batchedUpdates</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token builtin">number</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token builtin">number</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token builtin">number</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>numbercount <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="highlight-lines"><br><div class="highlight-line"> </div><br><br><div class="highlight-line"> </div><br><br><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>setState</code> 并不是单纯同步/异步的，它的表现会因调用场景的不同而不同：在 React 钩子函数及合成事件中，它表现为异步；而在 <code>setTimeout</code>、<code>setInterval</code> 等函数中，包括在 <code>DOM</code> 原生事件中，它都表现为同步。这种差异，本质上是由 <strong>React 事务机制</strong>和<strong>批量更新机制</strong>的工作方式来决定的。</li><li><code>setState</code> 并非真异步，只是看上去像异步。在源码中，通过 <code>isBatchingUpdates</code> 来判断 <code>setState</code> 是先存进 <code>state</code> 队列还是直接更新，如果值为 <code>true</code> 则执行异步操作，为 <code>false</code> 则直接更新。 那么什么情况下 <code>isBatchingUpdates</code> 会为 true 呢？在 React 可以控制的地方，就为 <code>true</code>，比如在 React <code>生命周期事件</code>和<code>合成事件</code>中，都会走合并操作，延迟更新的策略。 但在 React 无法控制的地方，比如<code>原生事件</code>，具体就是在 <code>addEventListener</code> 、<code>setTimeout</code>、<code>setInterval</code> 等事件中，就只能同步更新。 一般认为，做异步设计是为了性能优化、减少渲染次数，React 团队还补充了两点。保持内部一致性。如果将 <code>state</code> 改为同步更新，那尽管 <code>state</code> 的更新是同步的，但是 <code>props</code> 不是。启用并发更新，完成异步渲染。</li></ul><h2 id="react-setstate-调用之后发生了什么-是同步还是异步" tabindex="-1"><a class="header-anchor" href="#react-setstate-调用之后发生了什么-是同步还是异步" aria-hidden="true">#</a> React setState 调用之后发生了什么？是同步还是异步？</h2><p>（1）<strong>React 中 setState 后发生了什么</strong></p><p>在代码中调用 <code>setState</code> 函数之后，React 会将传入的参数对象与组件当前的状态<strong>合并</strong>，然后触发调和过程(<code>Reconciliation</code>)。经过调和过程，React 会以相对高效的方式根据新的状态构建 React 元素树并且着手重新渲染整个 UI 界面。</p><p>在 React 得到元素树之后，React 会自动计算出新的树与老树的节点差异，然后根据差异对界面进行最小化重渲染。在差异计算算法中，React 能够相对精确地知道哪些位置发生了改变以及应该如何改变，这就保证了按需更新，而不是全部重新渲染。</p><p>如果在短时间内频繁 <code>setState</code>。React 会将 <code>state</code> 的改变<strong>压入栈中</strong>，在合适的时机，批量更新 <code>state</code> 和视图，达到提高性能的效果。</p><p>（2）<strong>setState 是同步还是异步的</strong> 假如所有 <code>setState</code> 是同步的，意味着每执行一次 <code>setState</code> 时（有可能一个同步代码中，多次 setState），都重新 <code>vnode diff + dom</code> 修改，这对性能来说是极为不好的。如果是异步，则可以把一个同步代码中的多个 setState <strong>合并</strong>成一次组件更新。所以默认是异步的，但是在一些情况下是同步的。</p><p><code>setState</code> 并不是单纯同步/异步的，它的表现会因调用场景的不同而不同。在源码中，通过 <code>isBatchingUpdates</code>来判断 <code>setState</code> 是先存进 <code>state</code> 队列还是直接更新，如果值为 <code>true</code> 则执行异步操作，为 <code>false</code> 则直接更新。</p><ul><li><strong>异步</strong>：在 React 可以控制的地方，就为 true，比如在 React 生命周期事件和合成事件中，都会走合并操作，延迟更新的策略。</li><li><strong>同步</strong>：在 React 无法控制的地方，比如原生事件，具体就是在 <code>addEventListener</code> 、<code>setTimeout</code>、<code>setInterval</code> 等事件中，就只能同步更新。</li></ul><p><strong>react18 之后，setState 都为异步</strong>，无论写在什么样的语法环境中。 但可以使用 <strong><em><code>flushSync</code></em></strong> 方法 使之变为同步</p><p>一般认为，做异步设计是为了性能优化、减少渲染次数：</p><ul><li><code>setState</code> 设计为异步，可以显著的提升性能。如果每次调用 <code>setState</code> 都进行一次更新，那么意味着<code>render</code> 函数会被频繁调用，界面重新渲染，这样效率是很低的；最好的办法应该是获取到多个更新，之后进行批量更新；</li><li>如果同步更新了 <code>state</code> ，但是还没有执行 <code>render</code> 函数，那么 <code>state</code> 和 <code>props</code> 不能保持同步。 <code>state</code> 和 <code>props</code> 不能保持一致性，会在开发中产生很多的问题；</li></ul><h2 id="react-中-setstate-的第二个参数作用是什么" tabindex="-1"><a class="header-anchor" href="#react-中-setstate-的第二个参数作用是什么" aria-hidden="true">#</a> React 中 setState 的第二个参数作用是什么？</h2><p><code>setState</code> 的第二个参数是一个可选的回调函数。这个回调函数将在组件重新渲染后执行。等价于在 <code>componentDidUpdate</code> 生命周期内执行。通常建议使用 <code>componentDidUpdate</code> 来代替此方式。在这个回调函数中你可以拿到<strong>更新后</strong> <code>state</code> 的值：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
 key1<span class="token operator">:</span> newState1<span class="token punctuation">,</span>
 key2<span class="token operator">:</span> newState2<span class="token punctuation">,</span>
 <span class="token operator">...</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token comment">// 第二个参数是 state 更新完成后的回调函数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="react-中的-setstate-和-replacestate-的区别是什么" tabindex="-1"><a class="header-anchor" href="#react-中的-setstate-和-replacestate-的区别是什么" aria-hidden="true">#</a> React 中的 setState 和 replaceState 的区别是什么？</h2><p>（1）<strong>setState()</strong></p><p><code>setState()</code>用于设置状态对象，其语法如下：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token function">setState</span><span class="token punctuation">(</span>object nextState<span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token keyword">function</span> callback<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>nextState</code>，将要设置的新状态，该状态会和当前的 state 合并</li><li><code>callback</code>，可选参数，回调函数。该函数会在 setState 设置成功，且组件重新渲染后调用。</li></ul><p>合并 <code>nextState</code> 和当前 <code>state</code>，并重新渲染组件。<code>setState</code> 是 React 事件处理函数中和请求回调函数中触发 UI 更新的主要方法。</p><p>（2）<strong><em>replaceState()</em></strong></p><p><code>replaceState()</code>方法与 <code>setState()</code>类似，但是方法<strong>只会保留</strong> <code>nextState</code> 中状态，原 state 不在 <code>nextState</code> 中的状态都会被 删除。其语法如下：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token function">replaceState</span><span class="token punctuation">(</span>object nextState<span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token keyword">function</span> callback<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>nextState</code>，将要设置的新状态，该状态会<strong>替换</strong>当前的 state。</li><li><code>callback</code>，可选参数，回调函数。该函数会在 <code>replaceState</code> 设置成功，且组件重新渲染后调用。</li></ul><p><strong>总结</strong>： <code>setState</code> 是修改其中的部分状态，相当于 <code>Object.assign</code>，只是<strong>覆盖</strong>，不会减少原来的状态。 而<code>replaceState</code> 是完全<strong>替换</strong>原来的状态，相当于赋值，将原来的 state 替换为另一个对象，如果新状态属性减少，那么 state 中就没有这个状态了。</p><h2 id="state-是怎么注入到组件的-从-reducer-到组件经历了什么样的过程" tabindex="-1"><a class="header-anchor" href="#state-是怎么注入到组件的-从-reducer-到组件经历了什么样的过程" aria-hidden="true">#</a> state 是怎么注入到组件的，从 reducer 到组件经历了什么样的过程</h2><p>通过 <code>connect</code> 和 <code>mapStateToProps</code> 将 <code>state</code> 注入到组件中：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> connect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react-redux&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> setVisibilityFilter <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@/reducers/Todo/actions&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> Link <span class="token keyword">from</span> <span class="token string">&quot;@/containers/Todo/components/Link&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">mapStateToProps</span> <span class="token operator">=</span> <span class="token punctuation">(</span>state<span class="token punctuation">,</span> ownProps<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
  active<span class="token operator">:</span> ownProps<span class="token punctuation">.</span>filter <span class="token operator">===</span> state<span class="token punctuation">.</span>visibilityFilter<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">mapDispatchToProps</span> <span class="token operator">=</span> <span class="token punctuation">(</span>dispatch<span class="token punctuation">,</span> ownProps<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token function-variable function">setFilter</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">setVisibilityFilter</span><span class="token punctuation">(</span>ownProps<span class="token punctuation">.</span>filter<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">connect</span><span class="token punctuation">(</span>mapStateToProps<span class="token punctuation">,</span> mapDispatchToProps<span class="token punctuation">)</span><span class="token punctuation">(</span>Link<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="highlight-lines"><div class="highlight-line"> </div><br><br><br><div class="highlight-line"> </div><br><br><br><div class="highlight-line"> </div><br><br><div class="highlight-line"> </div></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，<code>active</code> 就是注入到 Link 组件中的状态。 <code>mapStateToProps(state，ownProps)</code>中带有两个参数，含义是 ∶</p><ul><li><code>state-store</code> 管理的全局状态对象，所有都组件状态数据都存储在该对象中。</li><li><code>ownProps</code> 组件通过 <code>props</code> 传入的参数。</li></ul><p><strong>reducer 到组件经历的过程</strong>：</p><ul><li><code>reducer</code> 对 <code>action</code> 对象处理，更新组件状态，并将新的状态值返回 <code>store</code>。</li><li>通过 <code>connect(mapStateToProps，mapDispatchToProps)(Component)</code>对组件 Component 进行升级，此时将状态值从 <code>store</code> 取出并作为 <code>props</code> 参数传递到组件。</li></ul><p><strong><em>高阶组件实现源码</em></strong> ∶</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> PropTypes <span class="token keyword">from</span> <span class="token string">&quot;prop-types&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 高阶组件 contect</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">connect</span> <span class="token operator">=</span>
  <span class="token punctuation">(</span>mapStateToProps<span class="token punctuation">,</span> mapDispatchToProps<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>WrappedComponent<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">class</span> <span class="token class-name">Connect</span> <span class="token keyword">extends</span> <span class="token class-name">React</span><span class="token punctuation">.</span>Component <span class="token punctuation">{</span>
      <span class="token comment">// 通过对context调用获取store</span>
      <span class="token keyword">static</span> contextTypes <span class="token operator">=</span> <span class="token punctuation">{</span>
        store<span class="token operator">:</span> PropTypes<span class="token punctuation">.</span>object<span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">;</span>
      <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>
          allProps<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token comment">// 第一遍需初始化所有组件初始状态</span>
      <span class="token function">componentWillMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">.</span>store<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_updateProps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        store<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_updateProps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 加入_updateProps()至store里的监听事件列表</span>
      <span class="token punctuation">}</span>
      <span class="token comment">// 执行action后更新props，使组件可以更新至最新状态（类似于setState）</span>
      <span class="token function">_updateProps</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">.</span>store<span class="token punctuation">;</span>
        <span class="token keyword">let</span> stateProps <span class="token operator">=</span> mapStateToProps
          <span class="token operator">?</span> <span class="token function">mapStateToProps</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">)</span>
          <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 防止 mapStateToProps 没有传入</span>
        <span class="token keyword">let</span> dispatchProps <span class="token operator">=</span> mapDispatchToProps
          <span class="token operator">?</span> <span class="token function">mapDispatchToProps</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span>dispatch<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">)</span>
          <span class="token operator">:</span> <span class="token punctuation">{</span>
              dispatch<span class="token operator">:</span> store<span class="token punctuation">.</span>dispatch<span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 防止 mapDispatchToProps 没有传入</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
          allProps<span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token operator">...</span>stateProps<span class="token punctuation">,</span>
            <span class="token operator">...</span>dispatchProps<span class="token punctuation">,</span>
            <span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">,</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token operator">&lt;</span>WrappedComponent <span class="token punctuation">{</span><span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>allProps<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> Connect<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><br><br><div class="highlight-line"> </div><br><br><div class="highlight-line"> </div><br><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="react-中怎么检验-props-验证-props-的目的是什么" tabindex="-1"><a class="header-anchor" href="#react-中怎么检验-props-验证-props-的目的是什么" aria-hidden="true">#</a> React 中怎么检验 props？验证 props 的目的是什么？</h2><p>React 为我们提供了<code>[PropTypes](https://legacy.reactjs.org/docs/typechecking-with-proptypes.html)</code>库来实现 Props 的验证。<br><code>PropTypes</code> 是一个 React 内置的库，可以帮助你检查传递给组件的 <code>props</code> 是否符合预期。它可以验证 <code>props</code> 的类型、是否必须、枚举值等等.<br> 当我们向<code>Props</code>传入的数据无效（向 Props 传入的数据类型和验证的数据类型不符）PropTypes 就会在控制台发出警告信息。它可以避免随着应用越来越复杂从而出现的问题。并且，它还可以让程序变得更易读。</p><div class="custom-container tip"><p class="custom-container-title">预定义的道具 **类型**：</p><p>PropTypes.number | PropTypes.string | PropTypes.array | PropTypes.object | PropTypes.func | PropTypes.node | PropTypes.element | PropTypes.bool | PropTypes.symbol | PropTypes.any | PropTypes.shape({})</p><p>使用 <code>组件名.propTypes = {}</code> 给组件添加校验规则</p></div><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> PropTypes <span class="token keyword">from</span> <span class="token string">&#39;prop-types&#39;</span>
<span class="token keyword">class</span> <span class="token class-name">Greeting</span> <span class="token keyword">extends</span> <span class="token class-name">React</span><span class="token punctuation">.</span>Component <span class="token punctuation">{</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>Hello<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
Greeting<span class="token punctuation">.</span>propTypes <span class="token operator">=</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> PropTypes<span class="token punctuation">.</span><span class="token builtin">string</span><span class="token punctuation">.</span>isRequired<span class="token punctuation">,</span>
  age<span class="token operator">:</span> PropTypes<span class="token punctuation">.</span><span class="token builtin">number</span><span class="token punctuation">,</span>
  gender<span class="token operator">:</span> PropTypes<span class="token punctuation">.</span><span class="token function">oneOf</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;male&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;female&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意</strong>，<code>PropTypes</code> 库只在开发环境中运行，并且不应该在生产环境中使用。在生产环境中，你应该确保你的代码不会因为 props 不符合预期而崩溃或出现错误。</p><p>当然，如果项目中使用了<code>TypeScript</code>，那么就可以不用<code>PropTypes</code>来校验，而使用<code>TypeScript</code>定义接口来校验 props。 React 中怎么检验 props？验证 props 的目的是什么？</p><h2 id="在-react-中组件的-props-改变时更新组件的有哪些方法" tabindex="-1"><a class="header-anchor" href="#在-react-中组件的-props-改变时更新组件的有哪些方法" aria-hidden="true">#</a> 在 React 中组件的 props 改变时更新组件的有哪些方法？</h2><p>在一个组件传入的 props 更新时重新渲染该组件常用的方法是在 <code>componentWillReceiveProps</code> 中将新的 <code>props</code>更新到组件的<code>state</code>中(这种 state 被成为派生状态(Derived State))，从而实现重新渲染。React 16.3 中还引入了一个新的钩子函数 <code>getDerivedStateFromProps</code> 来专门实现这一需求。</p><ol><li><strong>componentWillReceiveProps</strong>（已废弃）</li></ol><p>在 react 的<code>componentWillReceiveProps(nextProps)</code>生命周期中，可以在子组件的 render 函数执行前，通过<code>this.props</code>获取旧的属性，通过<code>nextProps</code>获取新的 props，对比两次 props 是否相同，从而更新子组件自己的 state。</p><p>这样的好处是，可以将数据请求放在这里进行执行，需要传的参数则从 <code>componentWillReceiveProps(nextProps)</code>中获取。而不必将所有的请求都放在父组件中。于是该请求只会在该组件渲染时才会发出，从而减轻请求负担。</p><ol start="2"><li><strong>getDerivedStateFromProps</strong>（16.3 引入）</li></ol><p>这个生命周期函数是为了替代 <code>componentWillReceiveProps</code> 存在的，所以在需要使用 <code>componentWillReceiveProps</code> 时，就可以考虑使用 <code>getDerivedStateFromProps</code> 来进行替代。</p><p>两者的参数是不相同的，而 <code>getDerivedStateFromProps</code> 是一个静态函数，也就是这个函数不能通过<code>this</code>访问到 class 的属性，也并不推荐直接访问属性。而是应该通过参数提供的<code>nextProps</code>以及 <code>prevState</code> 来进行判断，根据新传入的 <code>props</code> 来映射到 state。</p><p>需要注意的是，<strong>如果 props 传入的内容不需要影响到你的 state，那么就需要返回一个 <code>null</code></strong>，这个返回值是必须的，所以尽量将其写到函数的末尾：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">static</span> <span class="token function">getDerivedStateFromProps</span><span class="token punctuation">(</span>nextProps<span class="token punctuation">,</span> prevState<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span>type<span class="token punctuation">}</span> <span class="token operator">=</span> nextProps<span class="token punctuation">;</span>
  <span class="token comment">// 当传入的type发生变化的时候，更新state</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">!==</span> prevState<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      type<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 否则，对于state不进行任何操作</span>
  <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><div class="highlight-line"> </div><br><br><div class="highlight-line"> </div><br><br><br><br><br><br><div class="highlight-line"> </div></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>使用 <code>useEffect</code> 钩子在组件的 props 更改时更新组件的状态</li></ol><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useEffect<span class="token punctuation">,</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">Child</span><span class="token punctuation">(</span><span class="token punctuation">{</span> parentCount<span class="token punctuation">,</span> setParentCount <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>childCount<span class="token punctuation">,</span> setChildCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 将要跟踪的所有属性添加到 useEffect 钩子的依赖项数组中</span>
  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">setChildCount</span><span class="token punctuation">(</span>parentCount <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 注意，如果我们更新一个 prop 的值并且这个 prop 存在于 hook 的依赖数组中，你会导致一个无限的重新渲染循环</span>
    <span class="token comment">// setParentCount(current =&gt; current + 1); // 👇️ 这里将导致无限循环</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>parentCount<span class="token punctuation">,</span> setParentCount<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 👈️ 将 props 添加为依赖项</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>button<span class="token operator">&gt;</span>Child count <span class="token punctuation">{</span>childCount<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>parentCount<span class="token punctuation">,</span> setParentCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setParentCount</span><span class="token punctuation">(</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> current <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>
        Parent count<span class="token operator">:</span> <span class="token punctuation">{</span>parentCount<span class="token punctuation">}</span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>Child parentCount<span class="token operator">=</span><span class="token punctuation">{</span>parentCount<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>每次其依赖项之一发生更改时，都会重新运行 <code>useEffect</code> 钩子中的逻辑。</p><p><strong>注意</strong> ，我们传递给 useEffect 钩子的函数也会在初始渲染时调用。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 如果不想在初始渲染时运行 useEffect 钩子中的逻辑，但仅在特定属性更改时，请使用 ref 在初始渲染时提前返回。</span>
<span class="token keyword">const</span> isFirstRender <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>isFirstRender<span class="token punctuation">.</span>current<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    isFirstRender<span class="token punctuation">.</span>current <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token comment">// 👈️ 如果第一次渲染，请提前返回</span>
  <span class="token punctuation">}</span>
  <span class="token function">setChildCount</span><span class="token punctuation">(</span>parentCount <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>parentCount<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="highlight-lines"><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,72),c=[o];function i(l,u){return s(),a("div",null,c)}const d=n(p,[["render",i],["__file","react_state.html.vue"]]);export{d as default};
