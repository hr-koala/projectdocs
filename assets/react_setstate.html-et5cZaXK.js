import{_ as p,r as e,o,c,a as n,d as s,b as i,e as a}from"./app-lzSeYDl-.js";const l="/images/react/react6.png",u={},r=a('<h1 id="setstate-的-前世今生" tabindex="-1"><a class="header-anchor" href="#setstate-的-前世今生" aria-hidden="true">#</a> setState 的 “前世今生”</h1><p><img src="'+l+'" alt="setState"></p><h2 id="react-setstate-调用原理" tabindex="-1"><a class="header-anchor" href="#react-setstate-调用原理" aria-hidden="true">#</a> React setState 调用原理</h2><h3 id="_16-x-版本之前" tabindex="-1"><a class="header-anchor" href="#_16-x-版本之前" aria-hidden="true">#</a> <strong>16.x 版本之前</strong></h3><p>React 16.0 版本之前，React 中的 setState 调用原理涉及到一些重要的概念，包括<strong>虚拟 DOM</strong> (<code>Virtual DOM</code>)、<strong>调度</strong> (<code>Reconcile</code>) 和 (<code>Transaction</code>)。在这个版本之前，React 使用了一种称为“<strong>合并</strong>（merge）”的策略来处理 setState 的更新。</p><p>以下是在 React 16.0 版本之前 setState 的调用原理的主要步骤：</p><ol><li><strong>触发 <code>setState</code></strong>： 当组件通过调用 setState 来请求更新状态时，React 会将新的状态数据<strong>合并</strong>到组件的状态队列中，而不会立即执行更新。</li><li><strong>生成虚拟 DOM</strong>： React 将根据组件的新状态数据生成一个新的虚拟 DOM 树。这个虚拟 DOM 树是一个轻量级的 <strong>JavaScript 对象</strong>表示，它反映了组件的预期输出。</li><li><strong>比较虚拟 DOM</strong>： React 会将新生成的虚拟 DOM 树与先前的虚拟 DOM 树进行比较，以确定需要进行的实际 DOM 更新。</li><li><strong>计算差异</strong>： 在比较虚拟 DOM 树时，React 会计算出两棵树之间的差异（称为变化集合或变更集合）。这些差异表示需要对实际 DOM 进行的最小更改，以使其与新的虚拟 DOM 树保持一致。</li><li><strong>更新实际 DOM</strong>： 最后，React 将根据计算出的差异集合来更新实际 DOM。这个过程通常会批量处理多个 DOM 更新，以提高性能。</li></ol><p>React 16.0 版本之前的 setState 调用原理是通过<strong>合并新状态</strong>、<strong>生成虚拟 DOM</strong>、<strong>比较虚拟 DOM 并计算差异</strong>，最终将变更应用于实际 DOM 来实现组件更新。这个过程被称为<strong>调度过程</strong>，它使 React 能够高效地管理组件的状态和界面更新。</p><p>然而，React 16.0 版本之后引入了一种更快速的调度算法，称为 <code>Fiber</code>，它在内部实现上有一些重要的变化，以进一步提高性能和交互性。</p><h3 id="_16-x-版本之后" tabindex="-1"><a class="header-anchor" href="#_16-x-版本之后" aria-hidden="true">#</a> <strong>16.x 版本之后</strong></h3><p>React 16.0 版本之后，React 引入了一种称为 <code>Fiber</code> 的新的<strong>调度算法</strong>，以改进性能和交互性，并且 setState 的调用原理也经历了一些重要的变化。以下是 React 16.0 版本之后 setState 的调用原理的主要步骤：</p><ol><li><strong>触发 setState</strong>： 当组件通过调用 <code>setState</code> 来请求更新状态时，React 不再立即执行状态更新。相反，它<strong>将更新请求存储在内部数据结构中</strong>，然后继续执行后续任务。</li><li><strong>进入调度阶段</strong>： 在 React 内部，存在一个称为 <code>Fiber 树</code>的数据结构，它代表了组件树的结构。React 将开始一个称为调度（Reconciliation）的阶段，该阶段<strong>负责处理状态更新和重新渲染</strong>。</li><li><strong>生成 Fiber 树</strong>： React 创建一个新的 <code>Fiber</code> 树，该树反映了组件的预期输出。这个 Fiber 树与虚拟 DOM 有些相似，但它<strong>是一种更高效的数据结构，用于描述组件树的结构</strong>。</li><li><strong>比较 <code>Fiber</code> 树</strong>： React 将新生成的 Fiber 树与上一次的 Fiber 树进行比较，以确定需要进行的实际 DOM 更新。</li><li><strong>计算差异</strong>： 在比较 Fiber 树时，React Fiber 算法会计算出两棵树之间的差异（称为变化集合或变更集合）。这些差异表示需要对实际 DOM 进行的最小更改，以使其与新的 Fiber 树保持一致。</li><li><strong>构建更新队列</strong>： React 将计算出的差异转换为更新队列，该队列包含需要更新的组件和 DOM 节点。</li><li><strong>优先级调度</strong>： 一个重要的变化是 <strong>Fiber 算法引入了任务优先级调度</strong>。React 可以根据任务的优先级来安排更新，以确保更重要的任务能够更快地执行，从而提高性能和交互性。<a href="/react/react_expiration_time">React Expiration Time</a></li><li><strong>更新实际 DOM</strong>： 最后，React 将根据更新队列中的任务，以适当的顺序更新实际 DOM。这个过程通常会批量处理多个 DOM 更新，以提高性能。</li></ol><p>React 16.0 版本之后，setState 的调用原理经历了一些变化，包括使用 <code>Fiber 树</code>、<strong>任务优先级调度</strong>等，以提高性能和交互性。这个新的调度算法使 React 能够更有效地管理组件的状态和界面更新，并更好地响应用户交互。这些变化使得 React 可以更好地处理大型应用程序和复杂的用户界面。</p><h2 id="react-setstate-批量更新过程" tabindex="-1"><a class="header-anchor" href="#react-setstate-批量更新过程" aria-hidden="true">#</a> React setState 批量更新过程</h2><p>上面的内容提到了 批量更新这个概念，那么它是如何进行批量更新的呢？</p>',15),k=n("strong",null,"合并",-1),d=n("strong",null,"队列",-1),v=n("br",null,null,-1),m=n("strong",null,[s("事件处理函数自带 "),n("code",null,"batchedUpdates")],-1),g=n("br",null,null,-1),b={href:"https://juejin.cn/post/7062928241920573453",target:"_blank",rel:"noopener noreferrer"},h=a(`<p>下面贴出部分源码</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token comment">// 1. isBatchingUpdates 状态是如何发生变化的</span>
<span class="token comment">// 2. previousIsBatchingUpdates 变量会保存之前的 isBatchingUpdates 状态</span>
<span class="token comment">// 3. 最后 finally 重新赋值到 isBatchingUpdates，然后在一起批量更新</span>

<span class="token comment">// TODO: Batching should be implemented at the renderer level, not inside</span>
<span class="token comment">// the reconciler.</span>
<span class="token keyword">function</span> <span class="token generic-function"><span class="token function">batchedUpdates</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">A</span><span class="token punctuation">,</span> <span class="token constant">R</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token function-variable function">fn</span><span class="token operator">:</span> <span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token constant">A</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">R</span><span class="token punctuation">,</span> a<span class="token operator">:</span> <span class="token constant">A</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">R</span> <span class="token punctuation">{</span>
  <span class="token comment">// 当前是否 批量更新赋值到 previous 状态上</span>
  <span class="token keyword">const</span> previousIsBatchingUpdates <span class="token operator">=</span> isBatchingUpdates<span class="token punctuation">;</span>
  isBatchingUpdates <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这里调用的是 实际上是 handleClick 方法</span>
  <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
    <span class="token comment">// 将过去上一次更新的 previous 存到全局变量 BatchingUpdates 上</span>
    isBatchingUpdates <span class="token operator">=</span> previousIsBatchingUpdates<span class="token punctuation">;</span>
    <span class="token comment">// 当不是批量更新 而且不是在渲染阶段，那么 state 的值将会一次更新，调用 performSyncWork</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isBatchingUpdates <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>isRendering<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">performSyncWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 直接同步一起更新 所以这里我们可以</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><br><br><br><br><br><div class="highlight-line"> </div><br><br><div class="highlight-line"> </div><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>React 能够在一个更新周期内收集和处理多个 <code>setState</code> 调用，从而减少了不必要的重渲染和 DOM 操作，提高了性能。但需要注意的是，这个过程仍然是<strong>同步</strong>的，即在<strong>事件处理函数中的 <code>setState</code> 调用会等待事件处理函数执行完成后才会触发更新</strong>。</p><p><strong>setTimeout 中特殊情况</strong>: <code>setTimeout</code> 是一个<code>宏任务</code>，从内存角度来说，和之前任务不是在同一个栈中。所以执行到这个宏任务的时候，之前的栈中数据已被还原（<code>isBatchingUpdates</code> 是初始值 false），所以不是批量更新.</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token comment">// 在 setTimeout 中 强行调用 实现 batchUpdate</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> unstable_batchedUpdates <span class="token keyword">as</span> batchedUpdates <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react-dom&quot;</span><span class="token punctuation">;</span>
<span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// setTimeout中没有\`batchedUpdates\`</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">batchedUpdates</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">countNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><div class="highlight-line"> </div><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="react-setstate-第二个参数作用" tabindex="-1"><a class="header-anchor" href="#react-setstate-第二个参数作用" aria-hidden="true">#</a> React setState 第二个参数作用</h2><p>在 React 中，setState 方法可以接受一个可选的第二个参数，该参数是一个<strong>回调函数</strong>。该回调函数在状态更新并且组件重新渲染完成后被调用。第二个参数的<strong>主要作用是允许你在状态更新完成后执行一些额外的逻辑或操作</strong>。</p><p>以下是使用 setState 的第二个参数的一些常见用途：</p><ol><li><strong>执行回调操作</strong>： 你可以在第二个参数中传递一个回调函数，用于在状态更新后执行特定的操作。这在需要在状态更新后立即执行某些代码时非常有用。</li></ol><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> count<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Count updated:&quot;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><strong>异步操作</strong>： 如果你需要在状态更新后执行异步操作（例如发起网络请求），你可以将这些操作放在第二个参数的回调函数中，以确保它们在组件重新渲染后执行。</li></ol><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> data<span class="token operator">:</span> newData <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 在状态更新后执行异步操作</span>
  <span class="token function">fetchDataFromServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li><strong>获取最新状态值</strong>： 你可以使用第二个参数中的回调函数来访问更新后的状态值，而不必依赖于 this.state。这在需要在状态更新后立即使用新状态进行某些计算时非常有用。</li></ol><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> count<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Updated count:&quot;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 可以获取最新状态值</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要<strong>注意</strong>，由于 setState 可能是异步的，React 可能会对多个 setState 调用进行<strong>批处理</strong>，因此状态不一定会立即更新。回调函数中的代码会在状态真正更新并且组件重新渲染后才执行，因此你可以在其中放心地访问最新的状态值。特殊情况是在 <code>setTimeout</code> 在各种 宏任务异步函数的回调里面使用 setState.</p><p>setState 的<strong>第二个参数允许你在状态更新后执行特定的操作，以满足不同的需求</strong>，例如执行回调、进行异步操作或访问最新的状态值。这是一个有用的特性，可以帮助你更好地控制和处理组件的状态更新。</p><h2 id="setstate-与-replacestate-区别" tabindex="-1"><a class="header-anchor" href="#setstate-与-replacestate-区别" aria-hidden="true">#</a> <code>setState</code> 与 <code>replaceState</code> 区别</h2><p><code>setState</code> 和 <code>replaceState</code> 都是 React 组件中用于更新状态的方法，但它们之间存在一些关键的区别：</p><ul><li><code>replaceState</code>： <ul><li><code>replaceState</code> 也是 React 提供的方法之一，用于替换组件的整个状态。</li><li>当你调用 replaceState 时，它会<strong>完全替换当前状态，而不是合并状态</strong>。这意味着原有的状态属性将被移除，只有传递给 replaceState 的新状态属性将存在。</li><li>由于 replaceState 替换整个状态，因此它通常不建议在大多数情况下使用，因为它可能会导致组件重新渲染，而不仅仅是更新状态。</li></ul><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">replaceState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> count<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 替换整个状态</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><p><strong>总结</strong>：</p><ol><li><code>setState</code> 用于<strong>部分更新</strong>组件状态，通常是更常见的选择，它会保留原有状态的其他属性。</li><li><code>replaceState</code> 用于<strong>完全替换</strong>组件状态，通常应该避免在大多数情况下使用，除非你有特殊的需求要替换整个状态。</li></ol><p>请注意，在 React 16.0 版本之后，replaceState 方法已经被标记为不推荐使用，而且在函数式组件中不再支持。在新的 React 版本中，更加推荐使用 setState 进行状态更新。</p><h2 id="state-如何注入组件" tabindex="-1"><a class="header-anchor" href="#state-如何注入组件" aria-hidden="true">#</a> state 如何注入组件</h2><p>这里其实是举例说明 State 是如何注入到组件中使用的，在 React 中，你可以通过将状态（<code>state</code>）注入到组件中来使状态可用于组件。这通常是<strong>通过将状态作为组件的 <code>props</code>（属性）传递给组件来实现的</strong>。以下是如何在 React 中将状态注入组件的基本方法：</p><ol><li><strong>将状态作为 Props 传递</strong>： 在父组件中，你可以将状态作为 props 传递给子组件。这将使子组件能够访问和使用父组件的状态。</li></ol><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">class</span> <span class="token class-name">ParentComponent</span> <span class="token keyword">extends</span> <span class="token class-name">React</span><span class="token punctuation">.</span>Component <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>
      message<span class="token operator">:</span> <span class="token string">&quot;Hello from Parent!&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ChildComponent</span></span> <span class="token attr-name">message</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>message<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">ChildComponent</span> <span class="token keyword">extends</span> <span class="token class-name">React</span><span class="token punctuation">.</span>Component <span class="token punctuation">{</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>message<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><strong>使用 Context API</strong>： 如果你需要在组件树的深层嵌套组件之间传递状态而不必一级一级传递，可以使用 React 的<code> Context API</code>。Context 允许你<strong>在组件树中共享数据</strong>，使状态注入变得更加方便。</li></ol><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token comment">// 创建一个上下文对象</span>
<span class="token keyword">const</span> MyContext <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">ParentComponent</span> <span class="token keyword">extends</span> <span class="token class-name">React</span><span class="token punctuation">.</span>Component <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>
      message<span class="token operator">:</span> <span class="token string">&quot;Hello from Parent!&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">MyContext.Provider</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>message<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ChildComponent</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">MyContext.Provider</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">ChildComponent</span> <span class="token keyword">extends</span> <span class="token class-name">React</span><span class="token punctuation">.</span>Component <span class="token punctuation">{</span>
  <span class="token keyword">static</span> contextType <span class="token operator">=</span> MyContext<span class="token punctuation">;</span>
  <span class="token comment">// 或者 const message = useContext(MyContext);</span>

  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><br><br><br><br><br><br><br><div class="highlight-line"> </div><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li><strong>使用第三方状态管理库</strong>： 在大型应用中，你可能会发现使用 React 内置的状态管理方式不足以满足需求。在这种情况下，你可以考虑使用像 <code>Redux</code>、<code>Mobx</code>、<code>Recoil</code> 等第三方状态管理库。这些库允许你在全局或局部存储状态，并通过连接器（connectors）将状态注入到组件中，以便在需要的时候使用。</li></ol><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token comment">// 使用 Redux 状态管理库的示例</span>
<span class="token comment">// 需要使用 react-redux 库来连接 React 组件与 Redux store</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> connect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react-redux&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">MyComponent</span> <span class="token keyword">extends</span> <span class="token class-name">React</span><span class="token punctuation">.</span>Component <span class="token punctuation">{</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>message<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token function-variable function">mapStateToProps</span> <span class="token operator">=</span> <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    message<span class="token operator">:</span> state<span class="token punctuation">.</span>message<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">connect</span><span class="token punctuation">(</span>mapStateToProps<span class="token punctuation">)</span><span class="token punctuation">(</span>MyComponent<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="highlight-lines"><br><br><div class="highlight-line"> </div><br><br><br><br><br><br><br><div class="highlight-line"> </div><br><br><br><br><br><div class="highlight-line"> </div></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li><strong>使用 Hooks</strong>： 如果你在函数式组件中工作，可以使用 React Hooks 来管理状态。useState Hook 可以帮助你在函数组件中定义和使用状态。</li></ol><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">MyComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>message<span class="token punctuation">,</span> setMessage<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">&quot;Hello from Hook!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>message<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="从-reducer-到组件-经历了什么过程" tabindex="-1"><a class="header-anchor" href="#从-reducer-到组件-经历了什么过程" aria-hidden="true">#</a> 从 Reducer 到组件 经历了什么过程</h2><p>在一个典型的 React 应用中，从 Reducer（Redux 或其他状态管理工具中的 Reducer）到组件之间经历了以下过程：</p><ol><li><strong>Reducer 的创建</strong>： 首先，你需要创建一个 Reducer 函数。Reducer 是一个<strong>纯函数</strong>，它接受两个参数：当前状态（state）和一个操作（action），然后返回一个新的状态。Reducer 的作用是根据操作来更新状态，通常使用一个 switch 语句来根据操作的类型执行不同的更新。</li></ol><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token comment">// 一个简单的 Reducer 示例</span>
<span class="token keyword">const</span> initialState <span class="token operator">=</span> <span class="token punctuation">{</span>
  count<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">counterReducer</span><span class="token punctuation">(</span>state <span class="token operator">=</span> initialState<span class="token punctuation">,</span> action<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token string">&quot;INCREMENT&quot;</span><span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token operator">...</span>state<span class="token punctuation">,</span> count<span class="token operator">:</span> state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token string">&quot;DECREMENT&quot;</span><span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token operator">...</span>state<span class="token punctuation">,</span> count<span class="token operator">:</span> state<span class="token punctuation">.</span>count <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
      <span class="token keyword">return</span> state<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><strong>Store 的创建</strong>： 接下来，你需要创建一个 <code>Redux Store</code>（如果你使用的是 Redux）。Store 是一个包含应用程序状态的容器，它通过 Reducer 来管理状态的变化。</li></ol><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;redux&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>counterReducer<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="highlight-lines"><div class="highlight-line"> </div><div class="highlight-line"> </div></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li><strong>组件连接到 Store</strong>： 现在，你需要将 React 组件连接到 Redux Store，以便它们可以访问 Store 中的状态并将其用于渲染。这通常使用 <code>React-Redux</code> 库中的 <code>connect</code> 函数来实现。</li></ol><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> connect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react-redux&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">CounterComponent</span> <span class="token keyword">extends</span> <span class="token class-name">React</span><span class="token punctuation">.</span>Component <span class="token punctuation">{</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Count: </span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>count<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>increment<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Increment</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>decrement<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Decrement</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token function-variable function">mapStateToProps</span> <span class="token operator">=</span> <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    count<span class="token operator">:</span> state<span class="token punctuation">.</span>count<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">mapDispatchToProps</span> <span class="token operator">=</span> <span class="token punctuation">(</span>dispatch<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">increment</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token operator">:</span> <span class="token string">&quot;INCREMENT&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function-variable function">decrement</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token operator">:</span> <span class="token string">&quot;DECREMENT&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">connect</span><span class="token punctuation">(</span>mapStateToProps<span class="token punctuation">,</span> mapDispatchToProps<span class="token punctuation">)</span><span class="token punctuation">(</span>CounterComponent<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="highlight-lines"><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><br><div class="highlight-line"> </div><br><br><br><div class="highlight-line"> </div><br><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><div class="highlight-line"> </div></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li><p><strong>组件使用状态</strong>： 连接到 Redux Store 的组件现在可以<strong>通过 props 访问状态</strong>，并且可以触发操作来更新状态。在上面的示例中，<code>this.props.count</code> 包含了从 Redux Store 中获取的计数器的值，而 <code>this.props.increment</code> 和 <code>this.props.decrement</code> 方法用于分发相应的操作。</p></li><li><p><strong>操作的分发和 Reducer 的执行</strong>： 当组件触发操作时（例如，点击按钮），操作会分发到 Redux Store 中。Redux Store 会调用 <code>Reducer</code> 并传递当前状态和操作。Reducer 会根据操作的类型来更新状态，然后返回一个新的状态。这个新状态会被 <code>Redux Store</code> <strong>存储</strong>起来。</p></li><li><p><strong>状态的更新和重新渲染</strong>： 当状态更新后，与之连接的组件会自动重新渲染。这是因为 <strong>React-Redux 会检测到状态的变化，并将新的状态传递给组件的 props</strong>。这将触发组件的 render 方法，以便它可以使用新的状态来更新界面。</p></li></ol><p>可以看出目的其实是它遵循了单一数据源和单向数据流的原则，使应用程序的状态更加可控和可维护。</p><p>很有必要的<strong>补充</strong></p><p>当你使用 Redux 或其他状态管理工具时，<strong>将状态从 Reducer 到组件</strong>的流程是核心的状态管理流程。然而，还有一些进一步的细节和最佳实践，可以帮助你更好地组织和维护你的应用程序：</p><ol><li><strong>Action Creators</strong>： 为了更好地组织代码和减少重复，通常会创建 <code>action creators</code>。这些是函数，用于<strong>生成操作对象</strong>。例如：</li></ol><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">function</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span> type<span class="token operator">:</span> <span class="token string">&quot;INCREMENT&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">decrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span> type<span class="token operator">:</span> <span class="token string">&quot;DECREMENT&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这允许你在组件中调用 increment 和 decrement 函数来分发相应的操作，而不必手动创建操作对象。</p><ol start="2"><li><strong>分离 Reducer</strong>： 在一个大型应用程序中，将一个庞大的 Reducer 拆分为多个小的 Reducer 可以更好地管理代码。你可以使用 Redux 提供的 <code>combineReducers</code> 函数来<strong>合并</strong>多个 Reducer。</li></ol><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> combineReducers <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;redux&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> routerReducer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react-router-redux&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> rootReducer <span class="token operator">=</span> <span class="token function">combineReducers</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  router<span class="token operator">:</span> routerReducer<span class="token punctuation">,</span>
  counter<span class="token operator">:</span> counterReducer<span class="token punctuation">,</span>
  user<span class="token operator">:</span> userReducer<span class="token punctuation">,</span>
  <span class="token comment">// 更多的 reducer</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li><strong>中间件</strong>： Redux 支持中间件，它们可以用于处理异步操作、日志记录、路由等。中间件可以扩展 Redux 的功能，使其更强大。</li></ol><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> applyMiddleware<span class="token punctuation">,</span> createStore<span class="token punctuation">,</span> compose <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;redux&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> thunk <span class="token keyword">from</span> <span class="token string">&quot;redux-thunk&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 异步操作中间件</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> createLogger <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;redux-logger&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 日志中间件</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> routerMiddleware <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react-router-redux&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> createHistory <span class="token keyword">from</span> <span class="token string">&quot;history/createBrowserHistory&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> history <span class="token operator">=</span> <span class="token function">createHistory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">routerMiddleware</span><span class="token punctuation">(</span>history<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> middlewares <span class="token operator">=</span> <span class="token punctuation">[</span>thunk<span class="token punctuation">,</span> router<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> <span class="token function-variable function">devToolsExtension</span> <span class="token operator">=</span> <span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> f<span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">&quot;development&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> logger <span class="token operator">=</span> <span class="token function">createLogger</span><span class="token punctuation">(</span><span class="token punctuation">{</span> collapsed<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  middlewares<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>logger<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>devToolsExtension<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    devToolsExtension <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">devToolsExtension</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>
  rootReducer<span class="token punctuation">,</span>
  <span class="token function">compose</span><span class="token punctuation">(</span><span class="token function">applyMiddleware</span><span class="token punctuation">(</span><span class="token operator">...</span>middlewares<span class="token punctuation">)</span><span class="token punctuation">,</span> devToolsExtension<span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li><strong>Selectors</strong>： 使用 selectors 可以帮助你在组件中选择和派生状态的部分，以提供更高级的状态访问接口。这有助于隔离组件与状态结构的细节，使组件更独立和可维护。这个点可以大家学习一下，对于开发很方便</li></ol><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">const</span> <span class="token function-variable function">selectCounter</span> <span class="token operator">=</span> <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> state<span class="token punctuation">.</span>counter<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">selectUser</span> <span class="token operator">=</span> <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> state<span class="token punctuation">.</span>user<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li><strong>使用 Provider</strong>： 在应用程序的顶层组件上使用 Provider，以便 Redux Store 可以在整个组件树中访问。</li></ol><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Provider <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react-redux&quot;</span><span class="token punctuation">;</span>

ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Provider</span></span> <span class="token attr-name">store</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>store<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">App</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Provider</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span>
  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;root&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Redux 或其他状态管理工具提供了一种强大的方式来管理应用程序的状态，并使状态在组件之间共享变得更容易。了解这些额外的概念和最佳实践可以帮助你更好地组织和维护你的 React 应用程序的状态管理部分。</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token comment">// stores/index.tsx</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> configureStore<span class="token punctuation">,</span> combineReducers <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@reduxjs/toolkit&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> userReducer <span class="token keyword">from</span> <span class="token string">&quot;@/stores/userSlice&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">configureStore</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  reducer<span class="token operator">:</span> <span class="token function">combineReducers</span><span class="token punctuation">(</span><span class="token punctuation">{</span> user<span class="token operator">:</span> userReducer <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> store<span class="token punctuation">;</span>
<span class="token comment">// stores/userSlice.tsx</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> createSlice <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@reduxjs/toolkit&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> initialState <span class="token operator">=</span> <span class="token punctuation">{</span>
  username<span class="token operator">:</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">&quot;admin&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> userSlice <span class="token operator">=</span> <span class="token function">createSlice</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token string">&quot;user&quot;</span><span class="token punctuation">,</span>
  initialState<span class="token punctuation">,</span>
  reducers<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">setUserItem</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> action<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> <span class="token punctuation">{</span> username <span class="token punctuation">}</span> <span class="token operator">=</span> action<span class="token punctuation">.</span>payload<span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>username <span class="token operator">!==</span> state<span class="token punctuation">.</span>username<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">,</span> action<span class="token punctuation">.</span>payload<span class="token punctuation">.</span>username <span class="token operator">||</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> action<span class="token punctuation">.</span>payload<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> setUserItem <span class="token punctuation">}</span> <span class="token operator">=</span> userSlice<span class="token punctuation">.</span>actions<span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> userSlice<span class="token punctuation">.</span>reducer<span class="token punctuation">;</span>
<span class="token comment">// Dashboard.tsx</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token constant">FC</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> useSelector<span class="token punctuation">,</span> useDispatch <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react-redux&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Input <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;antd&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> setUserItem <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@/stores/userSlice&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> Dashboard<span class="token operator">:</span> <span class="token function-variable function">FC</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> username <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useSelector</span><span class="token punctuation">(</span><span class="token punctuation">(</span>state<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> state<span class="token punctuation">.</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> dispatch <span class="token operator">=</span> <span class="token function">useDispatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token function-variable function">changeUsername</span> <span class="token operator">=</span> <span class="token punctuation">(</span>val<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">dispatch</span><span class="token punctuation">(</span>
      <span class="token function">setUserItem</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        username<span class="token operator">:</span> val<span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Input</span></span>
      <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>username<span class="token punctuation">}</span></span>
      <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">changeUsername</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span></span>
    <span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Input</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> Dashboard<span class="token punctuation">;</span>
</code></pre><div class="highlight-lines"><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><br><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="state-和-props-之间的区别" tabindex="-1"><a class="header-anchor" href="#state-和-props-之间的区别" aria-hidden="true">#</a> state 和 props 之间的区别</h2><p>React 中，<code>state</code> 和 <code>props</code> 都是<strong>用于管理和传递数据</strong>的关键概念，但它们之间存在一些重要的区别：</p><ol><li><strong>State（状态）</strong>：</li></ol><ul><li><code>state</code> 是<strong>组件内</strong>部管理的数据，用于表示组件的内部状态。</li><li><code>state</code> 是<strong>可变的</strong>，可以在组件的生命周期内随时更新。通过调用 <code>setState</code> 方法来更新状态。</li><li><code>state</code> 只能在类组件（<code>class components</code>）中使用，因为函数组件（<code>function components</code>）之前<strong>没有内置的状态管理机制</strong>。但自 React 16.8 版本引入 Hooks 后，函数组件也可以使用 <code>useState</code> 等 Hook 来管理状态。</li><li><code>state</code> 的更新可能是<strong>异步的</strong>，所以不应该依赖于同步更新状态后立即获取最新值。如果需要在状态更新后执行操作，可以使用 <code>setState</code> 的回调函数或 <code>useEffect</code> 钩子。</li></ul><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">class</span> <span class="token class-name">MyComponent</span> <span class="token keyword">extends</span> <span class="token class-name">React</span><span class="token punctuation">.</span>Component <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>
      count<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>incrementCount <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">incrementCount</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">incrementCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> count<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        Count: </span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">}</span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onclick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>incrementCount<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><strong>Props（属性）</strong>：</li></ol><ul><li><code>props</code> 是<strong>组件之间</strong>传递数据的一种方式，用于从父组件向子组件传递数据。</li><li><code>props</code> 是<strong>不可变的</strong>，子组件不能直接修改从父组件接收到的 props。</li><li><code>props</code> 可以在函数组件和类组件中使用，并且是函数组件的主要输入。</li><li><code>props</code> 是<strong>单向的</strong>，数据从父组件流向子组件，子组件不能直接影响父组件的 props。</li></ul><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">function</span> <span class="token function">ChildComponent</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Hello, </span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token plain-text">!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">ParentComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ChildComponent</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Alice<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>总结</strong>：</p><ul><li>state 用于管理组件的内部状态，它是<strong>可变的</strong>，只能在<strong>组件内</strong>部使用。</li><li>props 用于在<strong>组件之间</strong>传递数据，它是<strong>不可变的</strong>，子组件通过 props 接收父组件传递的数据。</li><li>state 和 props 在 React 组件中扮演不同的角色，它们一起帮助你管理组件的数据流和渲染。通常，<code>state</code> 用于保存组件自身的状态，而 <code>props</code> 用于在组件之间传递数据。</li></ul>`,67);function y(x,w){const t=e("ExternalLinkIcon");return o(),c("div",null,[r,n("p",null,[s("React 会将多个 setState 调用"),k,s("为一个单一的更新。如果多个 setState 调用发生在同一个事件处理函数内部，它们会被合并成一个更新。这里同样可以想象得到，利用到的也是队列，将多个调用 setState 事件放到"),d,s("中，在一定时间范围内多次调用，那么会优化成为 一次 setState 的效果。 "),v,m,s(" 调用多次 setState 将会开启，batchUpdate 会将多次 setState 合并到一次 React 任务更新中. "),g,n("a",b,[s("关于 batchUpdate"),i(t)])]),h])}const R=p(u,[["render",y],["__file","react_setstate.html.vue"]]);export{R as default};
