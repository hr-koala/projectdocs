import{_ as o,r as p,o as c,c as i,a as s,d as n,b as e,e as a}from"./app-lzSeYDl-.js";const l={},u=a(`<h1 id="redux" tabindex="-1"><a class="header-anchor" href="#redux" aria-hidden="true">#</a> Redux</h1><h2 id="_1-对-redux-的理解-主要解决什么问题" tabindex="-1"><a class="header-anchor" href="#_1-对-redux-的理解-主要解决什么问题" aria-hidden="true">#</a> 1. 对 Redux 的理解，主要解决什么问题</h2><blockquote><ol><li>独立于组件，无视组件之间的层级关系，简化通信问题</li><li><strong>单项数据流</strong>清晰，易于定位 bug</li><li>调试工具配套良好，方便调试</li></ol></blockquote><p>React 是<strong>视图层框架</strong>。Redux 是一个用来<strong>管理数据状态</strong>和 UI 状态的 JavaScript 应用工具。随着 JavaScript 单页应用（SPA）开发日趋复杂， JavaScript 需要管理比任何时候都要多的 <code>state</code>（状态）， Redux 就是降低管理难度的。 （Redux 支持 React、Angular、jQuery 甚至纯 JavaScript）。</p><p>在 React 中，UI 以组件的形式来搭建，组件之间可以嵌套组合。但 React 中组件间通信的<strong>数据流是单向的</strong>，顶层组件可以通过 <code>props</code> 属性向下层组件传递数据，而下层组件不能向上层组件传递数据，兄弟组件之间同样不能。 这样简单的<strong>单向数据流</strong>支撑起了 React 中的数据可控性。</p><p>当项目越来越大的时候，管理数据的事件或回调函数将越来越多，也将越来越不好管理。管理不断变化的 <code>state</code> 非常困难。如果一个 model 的变化会引起另一个 model 变化，那么当 view 变化时，就可能引起对应 model 以及另一个 model 的变化，依次地，可能会引起另一个 view 的变化。直至你搞不清楚到底发生了什么。<br><code>state</code> 在什么时候，由于什么原因，如何变化已然不受控制。 当系统变得错综复杂的时候，想重现问题或者添加新功能就会变得举步维艰。如果这还不够糟糕，考虑一些来自前端开发领域的新需求，如更新调优、服务端渲染、路由跳转前请求数据等。<code>state</code> 的管理在大项目中相当复杂。</p><p>Redux 提供了一个叫 <code>store</code> 的统一仓储库，组件通过 <code>dispatch</code> 将 <code>state</code> 直接传入 <code>store</code>，不用通过其他的组件。 并且组件通过 <code>subscribe</code> 从 <code>store</code> 获取到 <code>state</code> 的改变。使用了 Redux，所有的组件都可以从 <code>store</code> 中获取到所需的 state，他们也能从 <code>store</code> 获取到 state 的改变。这比组件之间互相传递数据清晰明朗的多。</p><p><strong>主要解决的问题</strong>：<br> 单纯的 Redux 只是一个<strong>状态机</strong>，是没有 UI 呈现的，<code>react-redux</code> 作用是将 Redux 的状态机和 React 的 UI 呈现绑定在一起，当你 <strong><code>dispatch</code> <code>action</code> 改变 <code>state</code></strong> 的时候，会自动更新页面。</p><h2 id="_2-redux-原理及工作流程" tabindex="-1"><a class="header-anchor" href="#_2-redux-原理及工作流程" aria-hidden="true">#</a> 2. Redux 原理及工作流程</h2><p>（1）<strong>原理</strong> Redux 源码主要分为以下几个模块文件</p><ul><li><code>compose.js</code> 提供从右到左进行函数式编程</li><li><code>createStore.js</code> 提供作为生成唯一 store 的函数</li><li><code>combineReducers.js</code> 提供合并多个 reducer 的函数，保证 store 的唯一性</li><li><code>bindActionCreators.js</code> 可以让开发者在不直接接触 dispacth 的前提下进行更改 state 的操作</li><li><code>applyMiddleware.js</code> 这个方法通过中间件来增强 dispatch 的功能</li></ul><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">const</span> actionTypes <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token constant">ADD</span><span class="token operator">:</span> <span class="token string">&#39;ADD&#39;</span><span class="token punctuation">,</span>
  <span class="token constant">CHANGEINFO</span><span class="token operator">:</span> <span class="token string">&#39;CHANGEINFO&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> initState <span class="token operator">=</span> <span class="token punctuation">{</span>
  info<span class="token operator">:</span> <span class="token string">&#39;初始化&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">initReducer</span><span class="token punctuation">(</span>state <span class="token operator">=</span> initState<span class="token punctuation">,</span> action<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> actionTypes<span class="token punctuation">.</span><span class="token constant">CHANGEINFO</span><span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span>
        <span class="token operator">...</span>state<span class="token punctuation">,</span>
        info<span class="token operator">:</span> action<span class="token punctuation">.</span>preload<span class="token punctuation">.</span>info <span class="token operator">||</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token operator">...</span>state <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">createStore</span><span class="token punctuation">(</span>reducer<span class="token punctuation">,</span> initialState<span class="token punctuation">,</span> middleFunc<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>initialState <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> initialState <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    middleFunc <span class="token operator">=</span> initialState
    initialState <span class="token operator">=</span> <span class="token keyword">undefined</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">let</span> currentState <span class="token operator">=</span> initialState
  <span class="token keyword">const</span> listeners <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>middleFunc <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> middleFunc <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 封装dispatch</span>
    <span class="token keyword">return</span> <span class="token function">middleFunc</span><span class="token punctuation">(</span>createStore<span class="token punctuation">)</span><span class="token punctuation">(</span>reducer<span class="token punctuation">,</span> initialState<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">const</span> <span class="token function-variable function">getState</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> currentState
  <span class="token punctuation">}</span>
  <span class="token keyword">const</span> <span class="token function-variable function">dispatch</span> <span class="token operator">=</span> <span class="token punctuation">(</span>action<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    currentState <span class="token operator">=</span> <span class="token function">reducer</span><span class="token punctuation">(</span>currentState<span class="token punctuation">,</span> action<span class="token punctuation">)</span>
    listeners<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">listener</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">const</span> <span class="token function-variable function">subscribe</span> <span class="token operator">=</span> <span class="token punctuation">(</span>listener<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    listeners<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    getState<span class="token punctuation">,</span>
    dispatch<span class="token punctuation">,</span>
    subscribe<span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（2）<strong>工作流程</strong></p><ul><li><code>const store= createStore（fn）</code>生成数据;</li><li><code>action</code>: {type: Symble(&#39;action01), payload:&#39;payload&#39; }定义行为;</li><li><code>dispatch 发起 action</code>：store.dispatch(doSomething(&#39;action001&#39;));</li><li><code>reducer</code>：处理 action，返回新的 state;</li></ul><p>通俗点解释：</p><ul><li>首先，用户（通过 <code>View</code>）发出 <code>Action</code>，发出方式就用到了 <code>dispatch</code> 方法</li><li>然后，<code>Store</code> 自动调用 <code>Reducer</code>，并且传入两个参数：当前 <code>State</code> 和收到的 <code>Action</code>，<code>Reducer</code> 会返回新的 <code>State</code></li><li><code>State</code>—旦有变化，<code>Store</code> 就会调用监听函数，来更新 <code>View</code></li></ul><p>以 <code>store</code> 为核心，可以把它看成数据存储中心，但是他要更改数据的时候不能直接修改，数据修改更新的角色由 <code>Reducers</code> 来担任，<strong>store 只做存储，中间人</strong>，当 <code>Reducers</code> 的更新完成以后会通过 <code>store</code> 的<strong>订阅</strong>来通知 react component， 组件把新的状态重新获取渲染，组件中也能主动发送 <code>action</code>，创建 <code>action</code> 后这个动作是不会执行的，所以要 <code>dispatch</code> 这个 <code>action</code>，让 <code>store</code> 通过 <code>reducers</code> 去做更新 React Component 就是 react 的每个组件。</p><h2 id="_3-redux-中异步的请求怎么处理" tabindex="-1"><a class="header-anchor" href="#_3-redux-中异步的请求怎么处理" aria-hidden="true">#</a> 3. Redux 中异步的请求怎么处理</h2><p>可以在 componentDidmount 中直接进⾏请求⽆须借助 redux。但是在⼀定规模的项⽬中,上述⽅法很难进⾏异步流的管理,通常情况下我们会借助 redux 的异步中间件进⾏异步处理。redux 异步流中间件其实有很多，当下主流的异步中间件有两种 <code>redux-thunk</code>、<code>redux-saga</code>。</p><p>（1）<strong>使用 <code>react-thunk</code> 中间件</strong></p><p>redux-thunk 优点:</p><ul><li><strong>体积⼩</strong>: redux-thunk 的实现⽅式很简单,只有不到 20 ⾏代码</li><li><strong>使⽤简单</strong>: redux-thunk 没有引⼊像 <code>redux-saga</code> 或者 <code>redux-observable</code> 额外的范式,上⼿简单</li></ul><p>redux-thunk 缺陷:</p><ul><li><strong>样板代码过多</strong>: 与 redux 本身⼀样,通常⼀个请求需要⼤量的代码,⽽且很多都是重复性质的</li><li><strong>耦合严重</strong>: 异步操作与 redux 的 action 偶合在⼀起,不⽅便管理</li><li><strong>功能孱弱</strong>: 有⼀些实际开发中常⽤的功能需要⾃⼰进⾏封装</li></ul><p>使用步骤：</p><ul><li><strong>配置中间件</strong>，在 store 的创建中配置</li></ul><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createStore<span class="token punctuation">,</span> applyMiddleware<span class="token punctuation">,</span> compose <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;redux&#39;</span>
<span class="token keyword">import</span> reducer <span class="token keyword">from</span> <span class="token string">&#39;./reducer&#39;</span>
<span class="token keyword">import</span> thunk <span class="token keyword">from</span> <span class="token string">&#39;redux-thunk&#39;</span>
<span class="token comment">// 设置调试工具</span>
<span class="token keyword">const</span> composeEnhancers <span class="token operator">=</span> window<span class="token punctuation">.</span>__REDUX_DEVTOOLS_EXTENSION_COMPOSE__
  <span class="token operator">?</span> window<span class="token punctuation">.</span><span class="token function">__REDUX_DEVTOOLS_EXTENSION_COMPOSE__</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token operator">:</span> compose
<span class="token comment">// 设置中间件</span>
<span class="token keyword">const</span> enhancer <span class="token operator">=</span> <span class="token function">composeEnhancers</span><span class="token punctuation">(</span><span class="token function">applyMiddleware</span><span class="token punctuation">(</span>thunk<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>reducer<span class="token punctuation">,</span> enhancer<span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> store
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>添加一个返回函数的 <code>actionCreator</code>，将异步请求逻辑放在里面</li></ul><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token comment">/**
 发送get请求，并生成相应action，更新store的函数
 @param url {string} 请求地址
 @param func {function} 真正需要生成的action对应的actionCreator
 @return {function}
*/</span>
<span class="token comment">// dispatch为自动接收的store.dispatch函数</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">getHttpAction</span> <span class="token operator">=</span> <span class="token punctuation">(</span>url<span class="token punctuation">,</span> func<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>dispatch<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> action <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span>
    <span class="token function">dispatch</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>生成 action，并发送 action</li></ul><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
 <span class="token keyword">var</span> action <span class="token operator">=</span> <span class="token function">getHttpAction</span><span class="token punctuation">(</span><span class="token string">&#39;/getData&#39;</span><span class="token punctuation">,</span> getInitTodoItemAction<span class="token punctuation">)</span>
 <span class="token comment">// 发送函数类型的action时，该action的函数体会自动执行</span>
 store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（2）<strong>使用 redux-saga 中间件</strong></p><p><code>redux-saga</code> 优点:</p><ul><li><strong>异步解耦</strong>: 异步操作被被转移到单独 <code>saga.js</code> 中，不再是掺杂在 <code>action.js</code> 或 <code>component.js</code> 中</li><li><strong>action 摆脱 thunk function</strong>: dispatch 的参数依然是⼀个纯粹的 <code>action (FSA)</code>，⽽不是充满 “⿊魔法” thunk function</li><li><strong>异常处理</strong>: 受益于 generator function 的 <code>saga</code> 实现，代码异常/请求失败 都可以直接通过 <code>try/catch</code> 语法直接捕获处理</li><li><strong>功能强⼤</strong>: redux-saga 提供了⼤量的 <code>Saga</code> 辅助函数和 <code>Effect</code> 创建器供开发者使⽤,开发者⽆须封装或者简单封装即可使⽤</li><li><strong>灵活</strong>: redux-saga 可以将多个 <code>Saga</code> 可以串⾏/并⾏组合起来,形成⼀个⾮常实⽤的异步 flow</li><li><strong>易测试</strong>，提供了各种 <code>case</code> 的测试⽅案，包括 mock task，分⽀覆盖等等</li></ul><p><code>redux-saga</code> 缺陷:</p><ul><li>额外的学习成本: redux-saga 不仅在使⽤难以理解的 <code>generator function</code>,⽽且有数⼗个 API,学习成本远超 redux-thunk,最重要的是你的额外学习成本是只服务于这个库的,与 <code>redux-observable</code> 不同,<code>redux-observable</code> 虽然也有额外学习成本但是背后是 <code>rxjs</code> 和⼀整套思想</li><li>体积庞⼤: 体积略⼤,代码近 2000 ⾏，min 版 25KB 左右</li><li>功能过剩: 实际上并发控制等功能很难⽤到,但是我们依然需要引⼊这些代码</li><li>ts ⽀持不友好: <code>yield</code> ⽆法返回 TS 类型</li></ul><p><code>redux-saga</code> 可以捕获 action，然后执行一个函数，那么可以把异步代码放在这个函数中，使用步骤如下：</p><ul><li>配置中间件</li></ul><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>createStore<span class="token punctuation">,</span> applyMiddleware<span class="token punctuation">,</span> compose<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;redux&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> reducer <span class="token keyword">from</span> <span class="token string">&#39;./reducer&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> createSagaMiddleware <span class="token keyword">from</span> <span class="token string">&#39;redux-saga&#39;</span>
<span class="token keyword">import</span> TodoListSaga <span class="token keyword">from</span> <span class="token string">&#39;./sagas&#39;</span>
<span class="token keyword">const</span> composeEnhancers <span class="token operator">=</span> window<span class="token punctuation">.</span>__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ <span class="token operator">?</span>
window<span class="token punctuation">.</span><span class="token function">__REDUX_DEVTOOLS_EXTENSION_COMPOSE__</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">:</span>compose
<span class="token keyword">const</span> sagaMiddleware <span class="token operator">=</span> <span class="token function">createSagaMiddleware</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> enhancer <span class="token operator">=</span> <span class="token function">composeEnhancers</span><span class="token punctuation">(</span>
 <span class="token function">applyMiddleware</span><span class="token punctuation">(</span>sagaMiddleware<span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>reducer<span class="token punctuation">,</span> enhancer<span class="token punctuation">)</span><span class="token punctuation">;</span>
sagaMiddleware<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>TodoListSaga<span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> store<span class="token punctuation">;</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><div class="highlight-line"> </div><br><div class="highlight-line"> </div><br><div class="highlight-line"> </div><div class="highlight-line"> </div><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>将异步请求放在 sagas.js 中</li></ul><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> takeEvery<span class="token punctuation">,</span> put <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;redux-saga/effects&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> initTodoList <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./actionCreator&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token constant">GET_INIT_ITEM</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./actionTypes&#39;</span>
<span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">&#39;axios&#39;</span>
<span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token comment">// 可以获取异步返回数据</span>
    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">yield</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/getData&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> action <span class="token operator">=</span> <span class="token function">initTodoList</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span>
    <span class="token comment">// 将action发送到reducer</span>
    <span class="token keyword">yield</span> <span class="token function">put</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;网络请求失败&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">mySaga</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 自动捕获GET_INIT_ITEM类型的action，并执行func</span>
  <span class="token keyword">yield</span> <span class="token function">takeEvery</span><span class="token punctuation">(</span><span class="token constant">GET_INIT_ITEM</span><span class="token punctuation">,</span> func<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> mySaga
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>发送 action</li></ul><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
 <span class="token keyword">const</span> action <span class="token operator">=</span> <span class="token function">getInitTodoItemAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
   store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-redux-怎么实现属性传递-介绍下原理" tabindex="-1"><a class="header-anchor" href="#_4-redux-怎么实现属性传递-介绍下原理" aria-hidden="true">#</a> 4. Redux 怎么实现属性传递，介绍下原理</h2><p>react-redux 数据传输 ∶ <code>view--&gt;action--&gt;reducer--&gt;store--&gt;view</code>。看下点击事件的数据是如何通过 redux 传到 view 上：</p><ul><li><p><code>view</code> 上的 AddClick 事件通过<code>mapDispatchToProps</code> 把数据传到<code>action</code> ---&gt; click:()=&gt;dispatch(ADD)</p></li><li><p><code>action</code> 的 ADD 传到<code>reducer</code>上</p></li><li><p><code>reducer</code>传到<code>store</code>上 <code>const store = createStore(reducer)</code>;</p></li><li><p><code>store</code>再通过 <code>mapStateToProps</code> 映射穿到 view 上<code>text:State.text</code></p><p>代码示例 ∶</p></li></ul><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">&quot;react-dom&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> createStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;redux&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Provider<span class="token punctuation">,</span> connect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react-redux&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React</span><span class="token punctuation">.</span>Component <span class="token punctuation">{</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token punctuation">{</span> text<span class="token punctuation">,</span> click<span class="token punctuation">,</span> clickR <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">数据:已有人</span><span class="token punctuation">{</span>text<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>click<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">加人</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>clickR<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">减人</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> initialState <span class="token operator">=</span> <span class="token punctuation">{</span>
  text<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">reducer</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>state<span class="token punctuation">,</span> action<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token string">&quot;ADD&quot;</span><span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span> text<span class="token operator">:</span> state<span class="token punctuation">.</span>text <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token string">&quot;REMOVE&quot;</span><span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span> text<span class="token operator">:</span> state<span class="token punctuation">.</span>text <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
      <span class="token keyword">return</span> initialState<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> <span class="token constant">ADD</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  type<span class="token operator">:</span> <span class="token string">&quot;ADD&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> Remove <span class="token operator">=</span> <span class="token punctuation">{</span>
  type<span class="token operator">:</span> <span class="token string">&quot;REMOVE&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>reducer<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> <span class="token function-variable function">mapStateToProps</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    text<span class="token operator">:</span> state<span class="token punctuation">.</span>text<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> <span class="token function-variable function">mapDispatchToProps</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>dispatch<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">click</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token constant">ADD</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function-variable function">clickR</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">dispatch</span><span class="token punctuation">(</span>Remove<span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> App1 <span class="token operator">=</span> <span class="token function">connect</span><span class="token punctuation">(</span>mapStateToProps<span class="token punctuation">,</span> mapDispatchToProps<span class="token punctuation">)</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">;</span>
ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Provider</span></span> <span class="token attr-name">store</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>store<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">App1</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">App1</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Provider</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span>
  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;root&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><br><br><br><br><div class="highlight-line"> </div><br><br><br><br><br><div class="highlight-line"> </div><br><div class="highlight-line"> </div><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-redux-中间件是什么-接受几个参数-柯里化函数两端的参数具体是什么" tabindex="-1"><a class="header-anchor" href="#_5-redux-中间件是什么-接受几个参数-柯里化函数两端的参数具体是什么" aria-hidden="true">#</a> 5. Redux 中间件是什么？接受几个参数？柯里化函数两端的参数具体是什么？</h2><p>Redux 的中间件提供的是位于 <code>action</code> 被发起之后，到达 <code>reducer</code> 之前的<strong>扩展点</strong>，换而言之，原本 view -→&gt; action -&gt; reducer -&gt; store 的数据流加上中间件后变成了 view -&gt; action -&gt; <code>middleware</code> -&gt; reducer -&gt; store ，在这一环节可以做一些&quot;副作用&quot;的操作，如<strong>异步请求、打印日志</strong>等。</p><p><code>applyMiddleware</code> 源码：</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">applyMiddleware</span><span class="token punctuation">(</span><span class="token operator">...</span>middlewares<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>createStore<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
    <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// 利用传入的 createStore 和 reducer 和创建一个 store</span>
      <span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">let</span> <span class="token function-variable function">dispatch</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> middlewareAPI <span class="token operator">=</span> <span class="token punctuation">{</span>
        getState<span class="token operator">:</span> store<span class="token punctuation">.</span>getState<span class="token punctuation">,</span>
        <span class="token function-variable function">dispatch</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">;</span>
      <span class="token comment">// 让每个 middleware 带着 middlewareAPI 这个参数分别执行一遍</span>
      <span class="token keyword">const</span> chain <span class="token operator">=</span> middlewares<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>middleware<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">middleware</span><span class="token punctuation">(</span>middlewareAPI<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 接着 compose 将 chain 中的所有匿名函数，组装成一个新的函数，即新的 dispatch</span>
      dispatch <span class="token operator">=</span> <span class="token function">compose</span><span class="token punctuation">(</span><span class="token operator">...</span>chain<span class="token punctuation">)</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span>dispatch<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span>
        <span class="token operator">...</span>store<span class="token punctuation">,</span>
        dispatch<span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><div class="highlight-line"> </div><br><div class="highlight-line"> </div><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从 applyMiddleware 中可以看出 ∶</p><ul><li>redux 中间件接受一个<strong>对象</strong>作为参数，对象的参数上有两个字段 <code>dispatch</code> 和 <code>getState</code>，分别代表着 Redux Store 上的两个同名函数。</li><li>柯里化函数两端一个是 <code>middlewares</code>，一个是 <code>store.dispatch</code></li></ul><h2 id="_6-redux-请求中间件如何处理并发" tabindex="-1"><a class="header-anchor" href="#_6-redux-请求中间件如何处理并发" aria-hidden="true">#</a> 6. Redux 请求中间件如何处理并发</h2><p><strong>使用 <code>redux-Saga</code></strong></p><p><code>redux-saga</code> 是一个管理 redux 应用异步操作的中间件，用于代替 redux-thunk 的。 它通过创建 <code>Sagas</code> 将所有异步操作逻辑存放在一个地方进行集中处理，以此将 react 中的同步操作与异步操作区分开来，以便于后期的管理与维护。 <br> redux-saga 如何处理并发：</p><ul><li><code>takeEvery</code> 可以让多个 saga 任务并行被 fork 执行。</li></ul><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> fork<span class="token punctuation">,</span> take <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;redux-saga/effects&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">takeEvery</span> <span class="token operator">=</span> <span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> saga<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
  <span class="token function">fork</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> action <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">take</span><span class="token punctuation">(</span>pattern<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">yield</span> <span class="token function">fork</span><span class="token punctuation">(</span>saga<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="highlight-lines"><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>takeLatest</code><code>takeLatest</code> <strong>不允许多个 saga 任务并行地执行</strong>。一旦接收到新的发起的 <code>action</code>，它就会取消前面所有 fork 过的任务（如果这些任务还在执行的话）。<br> 在处理 AJAX 请求的时候，<strong>如果只希望获取最后那个请求的响应</strong>， <code>takeLatest</code> 就会非常有用。</li></ul><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> cancel<span class="token punctuation">,</span> fork<span class="token punctuation">,</span> take <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;redux-saga/effects&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">takeLatest</span> <span class="token operator">=</span> <span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> saga<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
  <span class="token function">fork</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> lastTask<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> action <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">take</span><span class="token punctuation">(</span>pattern<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>lastTask<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">yield</span> <span class="token function">cancel</span><span class="token punctuation">(</span>lastTask<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 如果任务已经结束，则 cancel 为空操作</span>
      <span class="token punctuation">}</span>
      lastTask <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">fork</span><span class="token punctuation">(</span>saga<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7-redux-状态管理器和变量挂载到-window-中有什么区别" tabindex="-1"><a class="header-anchor" href="#_7-redux-状态管理器和变量挂载到-window-中有什么区别" aria-hidden="true">#</a> 7. Redux 状态管理器和变量挂载到 window 中有什么区别</h2><p>两者都是存储数据以供后期使用。但是 <strong>Redux 状态更改可回溯——<code>Time travel</code></strong>，数据多了的时候可以很清晰的知道改动在哪里发生，完整的提供了一套状态管理模式。</p><p>随着 JavaScript 单页应用开发日趋复杂，JavaScript 需要管理比任何时候都要多的 <code>state</code> （<strong>状态</strong>）。 <br> 这些 state 可能包括服务器响应、缓存数据、本地生成尚未持久化到服务器的数据，也包括 UI 状态，如激活的路由，被选中的标签，是否显示加载动效或者分页器等等。</p><p>管理不断变化的 state 非常困难。如果一个 model 的变化会引起另一个 model 变化，那么当 view 变化时，就可能引起对应 model 以及另一个 model 的变化，依次地，可能会引起另一个 view 的变化。直至你搞不清楚到底发生了什么。<br><code>state</code> 在什么时候，由于什么原因，如何变化已然不受控制。 当系统变得错综复杂的时候，想重现问题或者添加新功能就会变得举步维艰。<br> 如果这还不够糟糕，考虑一些来自前端开发领域的新需求，如更新调优、服务端渲染、路由跳转前请求数据等等。前端开发者正在经受前所未有的复杂性，难道就这么放弃了吗?当然不是。</p><p>这里的复杂性很大程度上来自于：我们总是将两个难以理清的概念混淆在一起：<strong>变化和异步</strong>。 可以称它们为曼妥思和可乐。如果把二者分开，能做的很好，但混到一起，就变得一团糟。<br> 一些库如 React 视图在视图层禁止异步和直接操作 DOM 来解决这个问题。美中不足的是，React 依旧把处理 state 中数据的问题留给了你。 <code>Redux</code>就是为了帮你解决这个问题。</p>`,65),r={id:"_8-mobx-和-redux-有什么区别",tabindex:"-1"},d=s("a",{class:"header-anchor",href:"#_8-mobx-和-redux-有什么区别","aria-hidden":"true"},"#",-1),k={href:"https://cn.mobx.js.org/",target:"_blank",rel:"noopener noreferrer"},v=a("<p>（1）共同点</p><ul><li>为了解决状态管理混乱，无法有效同步的问题<strong>统一维护管理应用状态</strong>;</li><li>某一状态<strong>只有一个可信数据来源</strong>（通常命名为 <code>store</code>，指状态容器）;</li><li>操作更新状态方式统一，并且可控（通常以 <code>action</code> 方式提供更新状态的途径）;</li><li>支持将 <code>store</code> 与 <code>React</code> 组件连接，如 <code>react-redux</code>，<code>mobx-react</code>;</li></ul><p>（2）区别</p><ul><li>Redux 更多的是遵循 <code>Flux</code> 模式的一种实现，是一个 JavaScript 库，它关注点主要是以下几方面 ∶ <ul><li><strong>Action</strong>∶ 一个 JavaScript 对象，描述动作相关信息，主要包含 type 属性和 payload 属性 ∶ <ul><li><code>type</code>∶ action 类型;</li><li><code>payload</code>∶ 负载数据;</li></ul></li><li><strong>Reducer</strong>∶ 定义应用状态如何响应不同动作（action），如何更新状态;</li><li><strong>Store</strong>∶ 管理 action 和 reducer 及其关系的对象，主要提供以下功能 ∶ <ul><li>维护应用状态并支持访问状态(<code>getState()</code>);</li><li>支持监听 action 的分发，更新状态(<code>dispatch(action)</code>);</li><li>支持订阅 store 的变更(<code>subscribe(listener)</code>);</li></ul></li><li><strong>异步流</strong> ∶ 由于 <strong>Redux 所有对 store 状态的变更，都应该通过 action 触发</strong>，异步任务（通常都是业务或获取数据任务）也不例外，而为了不将业务或数据相关的任务混入 React 组件中，就需要使用其他框架配合管理异步任务流程，如 <code>redux-thunk</code>，<code>redux-saga</code> 等;</li></ul></li></ul>",4),m={href:"https://cn.mobx.js.org/",target:"_blank",rel:"noopener noreferrer"},b=s("strong",null,"透明函数响应式编程",-1),g=a(`<ul><li><code>Action</code>∶ 定义改变状态的动作函数，包括如何变更状态;</li><li><code>Store</code>∶ 集中管理模块状态（State）和动作(action)</li><li><code>Derivation</code>（衍生）∶ 从应用状态中派生而出，且没有任何其他影响的数据</li></ul><p><strong>对比总结</strong>：</p><ul><li>redux 将数据保存在<strong>单一的 store</strong> 中; mobx 将数据保存在<strong>分散的多个 store</strong> 中</li><li>redux 使用 <code>plain object</code> 保存数据，需要手动处理变化后的操作; mobx 适用 <code>observable</code> 保存数据，数据变化后自动处理响应的操作</li><li>redux 使用<strong>不可变状态</strong>，这意味着状态是<strong>只读</strong>的，不能直接去修改它，而是应该返回一个新的状态，同时使用纯函数; mobx 中的状态是<strong>可变的</strong>，可以直接对其进行修改</li><li>mobx 相对来说比较简单，在其中有很多的抽象，mobx 更多的使用<strong>面向对象的编程思维</strong>; redux 会比较复杂，因为其中的<strong>函数式编程思想</strong>掌握起来不是那么容易，同时需要借助一系列的中间件来处理异步和副作用</li><li>mobx 中有更多的<strong>抽象和封装</strong>，调试会比较困难，同时结果也难以预测; 而 redux 提供<strong>能够进行时间回溯的开发工具</strong>，同时其纯函数以及更少的抽象，让调试变得更加的容易</li></ul><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token comment">// 把所有的模块做统一处理</span>
<span class="token comment">// 导出一个统一的方法 useStore</span>
<span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>
<span class="token keyword">import</span> LoginStore <span class="token keyword">from</span> <span class="token string">&#39;./login.Store&#39;</span>
<span class="token keyword">import</span> UserStore <span class="token keyword">from</span> <span class="token string">&#39;./user.Store&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> configure <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;mobx&#39;</span>
<span class="token function">configure</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  enforceActions<span class="token operator">:</span> <span class="token string">&#39;never&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">RootStore</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>loginStore <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LoginStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>userStore <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 实例化根</span>
<span class="token comment">// 导出useStore context</span>
<span class="token keyword">const</span> rootStore <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RootStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> context <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createContext</span><span class="token punctuation">(</span>rootStore<span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token function-variable function">useStore</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> React<span class="token punctuation">.</span><span class="token function">useContext</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span> useStore <span class="token punctuation">}</span>

<span class="token comment">// login module</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> makeAutoObservable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;mobx&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> http<span class="token punctuation">,</span> setToken<span class="token punctuation">,</span> getToken<span class="token punctuation">,</span> removeToken <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@/utils&#39;</span>
<span class="token keyword">class</span> <span class="token class-name">LoginStore</span> <span class="token punctuation">{</span>
  token <span class="token operator">=</span> <span class="token function">getToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">&#39;&#39;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 响应式</span>
    <span class="token function">makeAutoObservable</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token function-variable function">getToken</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> mobile<span class="token punctuation">,</span> code <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 调用登录接口</span>
    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> http<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&#39;http://geek.itheima.net//authorizations&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
      mobile<span class="token punctuation">,</span>
      code<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token comment">// 存入token</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>token <span class="token operator">=</span> res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>token
    <span class="token comment">// 存入ls</span>
    <span class="token function">setToken</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>token<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 退出登录</span>
  <span class="token function-variable function">loginOut</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>token <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
    <span class="token function">removeToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> LoginStore

<span class="token keyword">import</span> <span class="token punctuation">{</span> makeAutoObservable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;mobx&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> http <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@/utils&#39;</span>

<span class="token keyword">class</span> <span class="token class-name">UserStore</span> <span class="token punctuation">{</span>
  userInfo <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">makeAutoObservable</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token function-variable function">getUserInfo</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 调用接口获取数据</span>
    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> http<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/user/profile&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>userInfo <span class="token operator">=</span> res<span class="token punctuation">.</span>data
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> UserStore
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> observer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;mobx-react-lite&#39;</span>
<span class="token keyword">const</span> <span class="token function-variable function">GeekLayout</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> pathname <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useLocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> userStore<span class="token punctuation">,</span> loginStore<span class="token punctuation">,</span> channelStore <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    userStore<span class="token punctuation">.</span><span class="token function">getUserInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    channelStore<span class="token punctuation">.</span><span class="token function">loadChannelList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>userStore<span class="token punctuation">,</span> channelStore<span class="token punctuation">]</span><span class="token punctuation">)</span>

  <span class="token comment">// 确定退出</span>
  <span class="token keyword">const</span> navigate <span class="token operator">=</span> <span class="token function">useNavigate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> <span class="token function-variable function">onConfirm</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 退出登录 删除token 跳回到登录</span>
    loginStore<span class="token punctuation">.</span><span class="token function">loginOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">navigate</span><span class="token punctuation">(</span><span class="token string">&#39;/login&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">observer</span><span class="token punctuation">(</span>GeekLayout<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_9-redux-和-vuex-有什么区别-它们的共同思想" tabindex="-1"><a class="header-anchor" href="#_9-redux-和-vuex-有什么区别-它们的共同思想" aria-hidden="true">#</a> 9. Redux 和 Vuex 有什么区别，它们的共同思想</h2><p>（1）<strong>Redux 和 Vuex 区别</strong></p><ul><li>Vuex 改进了 Redux 中的 <code>Action</code> 和 <code>Reducer</code> 函数，<strong>以 <code>mutations</code> 变化函数取代 <code>Reducer</code></strong>，无需 switch，只需在对应的 mutation 函数里改变 state 值即可</li><li>Vuex 由于 Vue 自动重新渲染的特性，<strong>无需订阅重新渲染函数</strong>，只要生成新的 State 即可</li><li>Vuex 数据流的顺序是 ∶View 调用 store.commit 提交对应的请求到 Store 中对应的 mutation 函数-&gt;store 改变（<strong>vue 检测到数据变化自动渲染</strong>）</li></ul><p>通俗点理解就是，vuex 弱化 <code>dispatch</code>，<strong>通过 <code>commit</code> 进行 <code>store</code> 状态的一次更变</strong>； 取消了 <code>action</code> 概念，不必传入特定的 action 形式进行指定变更； 弱化 <code>reducer</code>，<strong>基于 <code>commit</code> 参数直接对数据进行转变</strong>，使得框架更加简易;</p><p>（2）<strong>共同思想</strong></p><ul><li>单—的数据源</li><li>变化可以预测</li></ul><p>本质上 ∶ redux 与 vuex 都是对 mvvm 思想的服务，<strong>将数据从视图中抽离的一种方案</strong>。</p><h2 id="_10-redux-中间件是怎么拿到-store-和-action-然后怎么处理" tabindex="-1"><a class="header-anchor" href="#_10-redux-中间件是怎么拿到-store-和-action-然后怎么处理" aria-hidden="true">#</a> 10. Redux 中间件是怎么拿到 store 和 action? 然后怎么处理?</h2><p>redux 中间件本质就是一个<strong>函数柯里化</strong>。<code>redux applyMiddleware Api</code> 源码中每个 middleware 接受 <code>2</code> 个参数， Store 的 <code>getState</code> 函数和 <code>dispatch</code> 函数，分别获得 <code>store</code> 和 <code>action</code>，最终返回一个函数。<br> 该函数会被传入 next 的下一个 <code>middleware</code> 的 <code>dispatch</code> 方法，并返回一个接收 <code>action</code> 的新函数，这个函数可以直接调用 <code>next（action）</code>，或者在其他需要的时刻调用，甚至根本不去调用它。<br> 调用链中最后一个 <code>middleware</code> 会接受真实的<code>store</code> 的 <code>dispatch</code> 方法作为 <code>next</code> 参数，并借此结束调用链。所以，<br><code>middleware</code> 的函数签名是<code>({ getState,dispatch })=&gt; next =&gt; action</code>。</p><h2 id="_11-redux-中的-connect-有什么作用" tabindex="-1"><a class="header-anchor" href="#_11-redux-中的-connect-有什么作用" aria-hidden="true">#</a> 11. Redux 中的 connect 有什么作用</h2><p>connect 负责连接 React 和 Redux</p><p>（1）<strong>获取 state</strong></p><p>connect 通过 <code>context</code> 获取 <code>Provider</code> 中的 <code>store</code>，通过 <code>store.getState()</code> 获取整个 store tree 上所有 state</p><p>（2）<strong>包装原组件</strong></p><p>将 state 和 action <strong>通过 <code>props</code> 的方式传入到原组件内部</strong> <code>wrapWithConnect</code> 返回—个 ReactComponent 对象 <code>Connect</code>， Connect 重 新 render 外部传入的原组件 <code>WrappedComponent</code> ，并把 connect 中传入的 <code>mapStateToProps</code>，<code>mapDispatchToProps</code> 与组件上原有的 <code>props</code> <strong>合并</strong>后，通过属性的方式传给 <code>WrappedComponent</code></p><p>（3）<strong>监听 store tree 变化</strong></p><p>connect 缓存了 <code>store tree</code> 中 state 的状态，通过当前 state 状态 和变更前 state 状态进行比较，从而确定是否调用 <code>this.setState()</code> 方法触发 Connect 及其子组件的重新渲染</p><h2 id="mobx-集中状态管理" tabindex="-1"><a class="header-anchor" href="#mobx-集中状态管理" aria-hidden="true">#</a> Mobx 集中状态管理</h2><blockquote><p>安装 <code>mobx</code> 和中间件工具 <code>mobx-react-lite</code> 只能函数组件中使用 <code>yarn add react-mobx mobx mobx-react-lite</code></p></blockquote><p>优势:</p><ol><li>简单: 编写无模板的极简代码精准描述你的意图</li><li>轻松实现最优渲染: 依赖自动追踪，实现最小渲染优化</li><li>架构自由: 可移植, 可测试 无特殊心智负担</li></ol><p>初始化 mobx:</p><ol><li>定义数据状态 state</li><li>在构造器中实现数据响应式处理 <code>makeAutoObservble</code></li><li>定义修改数据的函数 action</li><li>实例化 store 并导出</li></ol><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> computed<span class="token punctuation">,</span> makeAutoObservable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;mobx&#39;</span>
<span class="token keyword">class</span> <span class="token class-name">CounterStore</span> <span class="token punctuation">{</span>
  count <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">// 定义数据</span>
  list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span>
  channelList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">makeAutoObservable</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token punctuation">{</span>
      filterList<span class="token operator">:</span> computed <span class="token comment">// 通过get关键词 定义计算属性; 在 makeAutoObservable 方法中标记计算属性</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment">// 响应式处理</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 定义修改数据的方法</span>
  <span class="token function-variable function">addCount</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token operator">++</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 修改原数组</span>
  <span class="token function-variable function">changeList</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 只要调用这个方法 就可以从后端拿到数据并且存入channelList</span>
  <span class="token function-variable function">setChannelList</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;http://geek.net/channels&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>channelList <span class="token operator">=</span> res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>data<span class="token punctuation">.</span>channels
  <span class="token punctuation">}</span>
  <span class="token comment">// 定义计算属性</span>
  <span class="token keyword">get</span> <span class="token function">filterList</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>item <span class="token operator">=&gt;</span> item <span class="token operator">&gt;</span> <span class="token number">4</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> counter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CounterStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> counter
</code></pre><div class="highlight-lines"><div class="highlight-line"> </div><br><br><br><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">class</span> <span class="token class-name">RootStore</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>counterStore <span class="token operator">=</span> counter
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> rootStore <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RootStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// context机制的数据查找链  Provider如果找不到 就找createContext方法执行时传入的参数</span>
<span class="token keyword">const</span> context <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createContext</span><span class="token punctuation">(</span>rootStore<span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token function-variable function">useStore</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> React<span class="token punctuation">.</span><span class="token function">useContext</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>
<span class="token comment">// useStore() =&gt;  rootStore  { counterStore, taskStore }</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span> useStore <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>React 使用 store:</p><ol><li>在组件中导入<code>counterStore</code>实例对象</li><li>在组件中使用<code>storeStore</code>实例对象中的数据</li><li>通过事件调用修改数据的方法修改 store 中的数据</li><li>让组件响应数据变化</li></ol><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token comment">// 导入counterStore</span>
<span class="token keyword">import</span> counterStore <span class="token keyword">from</span> <span class="token string">&#39;./store&#39;</span>
<span class="token comment">// 导入observer方法</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> observer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;mobx-react-lite&#39;</span>
<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> channlStore <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token comment">// 1. 使用数据渲染组件</span>
  <span class="token comment">// 2. 触发action函数发送异步请求</span>
  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    channlStore<span class="token punctuation">.</span><span class="token function">setChannelList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>App<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> counterStore<span class="token punctuation">.</span><span class="token function">addCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token punctuation">{</span>counterStore<span class="token punctuation">.</span>count<span class="token punctuation">}</span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// 包裹组件让视图响应数据变化</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">observer</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,33);function h(w,x){const t=p("ExternalLinkIcon");return c(),i("div",null,[u,s("h2",r,[d,n(" 8. "),s("a",k,[n("MobX"),e(t)]),n(" 和 redux 有什么区别？")]),v,s("p",null,[s("a",m,[n("MobX"),e(t)]),n(" 是一个"),b,n("的状态管理库，它使得状态管理简单可伸缩 ∶")]),g])}const f=o(l,[["render",h],["__file","react_redux.html.vue"]]);export{f as default};
