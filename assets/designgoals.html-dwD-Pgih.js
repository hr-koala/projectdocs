import{_ as n,o as s,c as a,e}from"./app-lzSeYDl-.js";const p={},t=e(`<h1 id="vue3-0-的设计目标是什么-做了哪些优化" tabindex="-1"><a class="header-anchor" href="#vue3-0-的设计目标是什么-做了哪些优化" aria-hidden="true">#</a> Vue3.0 的设计目标是什么？做了哪些优化?</h1><h2 id="一、设计目标" tabindex="-1"><a class="header-anchor" href="#一、设计目标" aria-hidden="true">#</a> 一、设计目标</h2><p>不以解决实际业务痛点的更新都是耍流氓，下面我们来列举一下 Vue3 之前我们或许会面临的问题</p><ol><li>随着功能的增长，复杂组件的代码变得越来越难以维护</li><li>缺少一种比较「干净」的在多个组件之间提取和复用逻辑的机制</li><li>类型推断不够友好</li><li><code>bundle</code> 的时间太久了</li><li><code>vue2</code> 响应式的缺点是:无法监听到对象属性的动态添加和删除,无法监听到数组下标和 <code>length</code> 长度的变化;</li></ol><p>Vue2 不允许在已经创建的实例上动态添加新的响应式属性.<br> 三种解决方案（<strong>Vue.set() / Object.assign() / $forcecUpdated()</strong>）</p><h3 id="而-vue3-经过长达两三年时间的筹备-做了哪些事情" tabindex="-1"><a class="header-anchor" href="#而-vue3-经过长达两三年时间的筹备-做了哪些事情" aria-hidden="true">#</a> 而 Vue3 经过长达两三年时间的筹备，做了哪些事情？</h3><ol><li>更小</li><li>更快</li><li>TypeScript 支持</li><li>API 设计一致性</li><li>提高自身可维护性</li><li>开放更多底层功能<br> 一句话概述，就是 <strong>更小更快更友好</strong> 了</li></ol><ul><li><code>diff</code> 算法的优化；</li><li><code>hoistStatic</code> 静态提升；</li><li><code>cacheHandlers</code> 事件侦听器缓存；</li><li><code>ssr</code> 渲染；更好的 <code>Ts</code> 支持；</li><li><code>Compostion API</code>: 组合 API/注入 API；</li><li>更先进的组件；</li><li>自定义渲染 <code>API</code>；</li><li>按需编译，体积比 vue2.x 更小；</li><li>支持多根节点组件等</li></ul><h3 id="_1-diff-算法的优化" tabindex="-1"><a class="header-anchor" href="#_1-diff-算法的优化" aria-hidden="true">#</a> 1.diff 算法的优化</h3><p><code>vue2</code> 中的虚拟 dom 是全量的对比（每个节点不论写死的还是动态的都会一层一层比较，这就浪费了大部分事件在对比静态节点上）</p><p><code>vue3</code> 新增了<code>静态标记</code>（patchflag）与上次虚拟节点对比时，只对比带有 <code>patch flag</code> 的节点（动态数据所在的节点）；可通过 <code>flag</code> 信息得知当前节点要对比的具体内容。</p><p>当视图更新时，只对动态节点部分进行 diff 运算，减少了资源的损耗。<code>Patchflag</code> 是个枚举，取值为 <strong>1</strong> 代表这个元素的文本是动态绑定的，取值为 <strong>2</strong> 代表元素的 class 是动态绑定的。</p><h3 id="_2-hoiststatic-静态提升" tabindex="-1"><a class="header-anchor" href="#_2-hoiststatic-静态提升" aria-hidden="true">#</a> 2：hoistStatic 静态提升</h3><p><code>vue2</code> 无论元素是否参与更新，每次都会重新创建然后再渲染。</p><p><code>vue3</code> 对于不参与更新的元素，会做静态提升，只会被创建一次，在渲染时直接复用即可。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//例：下面我们利用Vue 3 Template Explorer,来直观的感受一下：</span>
<span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>盒子<span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>盒子<span class="token number">2</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token comment">// 静态提升之前</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
        <span class="token function">_openBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token function">_createBlock</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
            <span class="token function">_createVNode</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&#39;盒子1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token function">_createVNode</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&#39;盒子2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token function">_createVNode</span><span class="token punctuation">(</span>
                <span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span>
                <span class="token keyword">null</span><span class="token punctuation">,</span>
                <span class="token function">_toDisplayString</span><span class="token punctuation">(</span>_ctx<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token number">1</span> <span class="token comment">/* TEXT */</span> <span class="token comment">/* 1 代表这个元素的文本是动态绑定的，取值为 2 代表元素的 class 是动态绑定*/</span>
            <span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// 静态提升之后</span>
<span class="token keyword">const</span> _hoisted_1 <span class="token operator">=</span> <span class="token comment">/*#__PURE__*/</span> <span class="token function">_createVNode</span><span class="token punctuation">(</span>
    <span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span>
    <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token string">&#39;盒子1&#39;</span><span class="token punctuation">,</span>
    <span class="token operator">-</span><span class="token number">1</span> <span class="token comment">/* HOISTED */</span>
<span class="token punctuation">)</span>
<span class="token keyword">const</span> _hoisted_2 <span class="token operator">=</span> <span class="token comment">/*#__PURE__*/</span> <span class="token function">_createVNode</span><span class="token punctuation">(</span>
    <span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span>
    <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token string">&#39;盒子2&#39;</span><span class="token punctuation">,</span>
    <span class="token operator">-</span><span class="token number">1</span> <span class="token comment">/* HOISTED */</span>
<span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
        <span class="token function">_openBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token function">_createBlock</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
            _hoisted_1<span class="token punctuation">,</span>
            _hoisted_2<span class="token punctuation">,</span>
            <span class="token function">_createVNode</span><span class="token punctuation">(</span>
                <span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span>
                <span class="token keyword">null</span><span class="token punctuation">,</span>
                <span class="token function">_toDisplayString</span><span class="token punctuation">(</span>_ctx<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token number">1</span> <span class="token comment">/* TEXT */</span>
            <span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// 从以上代码中我们可以看出，_hoisted_1 和_hoisted_2 两个方法被提升到了渲染函数 render 之外，也就是我们说的静态提升。通过静态提升可以避免每次渲染的时候都要重新创建这些对象，从而大大提高了渲染效率。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-cachehandlers-事件侦听器缓存" tabindex="-1"><a class="header-anchor" href="#_3-cachehandlers-事件侦听器缓存" aria-hidden="true">#</a> 3：cacheHandlers 事件侦听器缓存</h3><p><code>vue2.x</code> 中，绑定事件每次触发都要重新生成全新的 function 去更新，<code>cacheHandlers</code> 是 Vue3 中提供的事件缓存对象，当 <code>cacheHandlers</code> 开启，会自动生成一个内联函数，同时生成一个静态节点。当事件再次触发时，只需从缓存中调用即可，无需再次更新。</p><p>默认情况下 <code>onClick</code> 会被视为动态绑定，所以每次都会追踪它的变化，但是同一个函数没必要追踪变化，直接缓存起来复用即可。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 例：下面我们同样是通过Vue 3 Template Explorer，来看一下事件监听器缓存的作用：</span>
<span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>div @click<span class="token operator">=</span><span class="token string">&quot;todo&quot;</span><span class="token operator">&gt;</span>做点有趣的事<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token comment">// 该段 html 经过编译后变成我们下面的结构(未开启事件监听缓存)：</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">_openBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">_createBlock</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
            <span class="token function">_createVNode</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token literal-property property">onClick</span><span class="token operator">:</span> _ctx<span class="token punctuation">.</span>todo<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;做点有趣的事&#39;</span><span class="token punctuation">,</span> <span class="token number">8</span> <span class="token comment">/* PROPS */</span><span class="token punctuation">,</span>
                <span class="token punctuation">[</span><span class="token string">&#39;onClick&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// 当我们开启事件监听器缓存后：</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">_openBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">_createBlock</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
            <span class="token function">_createVNode</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span><span class="token punctuation">{</span>
                    <span class="token literal-property property">onClick</span><span class="token operator">:</span>    <span class="token comment">//开启监听后</span>
                        _cache<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">(</span>_cache<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>_ctx<span class="token punctuation">.</span><span class="token function">todo</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">&#39;做点有趣的事&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// 我们可以对比开启事件监听缓存前后的代码，转换之后的代码, 我们只需要观察有没有静态标记即可，**在Vue3的diff算法中, 只有有静态标记的才会进行比较, 才会进行追踪。**</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-ssr-渲染" tabindex="-1"><a class="header-anchor" href="#_4-ssr-渲染" aria-hidden="true">#</a> 4：ssr 渲染</h3><p><code>Vue2</code> 中也是有 <code>SSR</code> 渲染的，但是 <code>Vue3</code> 中的 <code>SSR</code> 渲染相对于 Vue2 来说，性能方面也有对应的提升。</p><p>当存在大量静态内容时，这些内容会被当作纯字符串推进一个 <code>buffer</code> 里面，即使存在动态的绑定，会通过模版插值潜入进去。这样会比通过虚拟 <code>dom</code> 来渲染的快上很多。</p><p>当静态内容大到一个量级的时候，会用_createStaticVNode 方法在客户端去生成一个 <code>static node</code>，这些静态 <code>node</code>，会被直接 <code>innerHtml</code>，就不需要再创建对象，然后根据对象渲染。</p><h3 id="_5-更好的-ts-支持" tabindex="-1"><a class="header-anchor" href="#_5-更好的-ts-支持" aria-hidden="true">#</a> 5：更好的 Ts 支持</h3><p>vue2 不适合使用 <code>ts</code>，原因在于 vue2 的 <code>Option API</code> 风格。options 是个简单对象，而 ts 是一种类型系统、面向对象的语法。两者有点不匹配。</p><p>在 vue2 结合 <code>ts</code> 的具体实践中，要用 <code>vue-class-component</code> 强化 vue 组件，让 <code>Script</code> 支持 <code>TypeScript</code> 装饰器，用 <code>vue-property-decorator</code> 来增加更多结合 Vue 特性的装饰器，最终搞的 ts 的组件写法和 js 的组件写法差别挺大。</p><p>在 vue3 中，量身打造了 <code>defineComponent</code> 函数，使组件在 ts 下，更好的利用参数类型推断 。<code>Composition API</code> 代码风格中，比较有代表性的 api 就是 <code>ref</code> 和 <code>reactive</code>，也很好的支持了类型声明。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineComponent<span class="token punctuation">,</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">const</span> Component <span class="token operator">=</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">success</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> String <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token literal-property property">student</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">type</span><span class="token operator">:</span> Object <span class="token keyword">as</span> PropType<span class="token operator">&lt;</span>Student<span class="token operator">&gt;</span><span class="token punctuation">,</span>
          <span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token boolean">true</span>
       <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> year <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">2022</span><span class="token punctuation">)</span>
      <span class="token keyword">const</span> month <span class="token operator">=</span> ref<span class="token operator">&lt;</span>string <span class="token operator">|</span> number<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token string">&#39;9&#39;</span><span class="token punctuation">)</span>
      month<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token number">9</span> <span class="token comment">// OK</span>
     <span class="token keyword">const</span> result <span class="token operator">=</span> year<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-compostion-api-组合-api-注入-api" tabindex="-1"><a class="header-anchor" href="#_6-compostion-api-组合-api-注入-api" aria-hidden="true">#</a> 6：Compostion API: 组合 API/注入 API</h3><p>传统的网页是 Html/Css/Javascript（结构/样式/逻辑）分离。vue 通过组件化的方式，将联系紧密的结构/样式/逻辑放在一起，有利于代码的维护。Compostion api 更进一步，着力于 JS（逻辑）部分，将逻辑相关的代码放在一起，这样更有利于代码的维护。</p><p>在 vue2 的组件内使用的是 Option API 风格(data/methods/mounted)来组织的代码，这样会让逻辑分散，举个例子就是我们完成一个计数器功能，要在 <code>data</code> 里声明变量，在 <code>methods</code> 定义响应函数，在 <code>mounted</code> 里初始化变量，如果在一个功能比较多、代码量比较大的组件里，你要维护这样一个功能，就需要在 data/methods/mounted 反复的切换到对应位置，然后进行代码的更改。</p><p>而在 vue3 中，使用 <code>setup</code> 函数。如下所示跟 count 相关的逻辑，都放到 counter.ts 文件里，跟 todo 相关的逻辑放到 todos.ts 里。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> useCounter <span class="token keyword">from</span> <span class="token string">&#39;./counter&#39;</span>
<span class="token keyword">import</span> useTodo <span class="token keyword">from</span> <span class="token string">&#39;./todos&#39;</span>
<span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token punctuation">{</span> val<span class="token punctuation">,</span> todos<span class="token punctuation">,</span> addTodo <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useTodo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">let</span> <span class="token punctuation">{</span>count<span class="token punctuation">,</span>add<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
        val<span class="token punctuation">,</span> todos<span class="token punctuation">,</span> addTodo<span class="token punctuation">,</span>count<span class="token punctuation">,</span>add<span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-更先进的组件" tabindex="-1"><a class="header-anchor" href="#_7-更先进的组件" aria-hidden="true">#</a> 7：更先进的组件</h3><p>vue2 是不允许这样写的，组件必须有一个跟节点，现在可以这样写，vue 将为我们创建一个虚拟的 <code>Fragment</code> 节点。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>根节点<span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>根结点<span class="token number">2</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>Suspended-component</code> 完全渲染之前，备用内容会被显示出来。如果是异步组件，Suspense 可以等待组件被下载，或者在设置函数中执行一些异步操作。</p><h3 id="_8-自定义渲染-api" tabindex="-1"><a class="header-anchor" href="#_8-自定义渲染-api" aria-hidden="true">#</a> 8：自定义渲染 API</h3><p>vue2.x 项目架构对于 <code>weex</code>（移动端跨平台方案）和 <code>myvue</code>（小程序上使用）等渲染到不同平台不太友好，vue3.0 推出了自定义渲染 API 解决了该问题。下面我们先看 vue2 和 vue3 的入口写法有哪些不同。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// vue2</span>
<span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">&#39;./App.vue&#39;</span>
<span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token parameter">h</span><span class="token operator">=&gt;</span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// vue3</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> createApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">&quot;./src/App&quot;</span>
<span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>vue 官方实现的 <code>createApp</code> 会给我们的 template 映射生成 html 代码，但是要是你不想渲染生成到 html ，而是要渲染生成到 <code>canvas</code> 之类的不是 html 的代码的时候，那就需要用到 <code>Custom Renderer API</code> 来定义自己的 render 渲染生成函数了。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./runtime-render&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">&quot;./src/App&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 根组件</span>
<span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">&quot;#app&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用自定义渲染 API，如 <code>weex</code> 和 <code>myvue</code> 这类方案的问题就得到了完美解决。只需重写 <code>createApp</code> 即可。</p><h3 id="_9-按需编译-体积比-vue2-x-更小" tabindex="-1"><a class="header-anchor" href="#_9-按需编译-体积比-vue2-x-更小" aria-hidden="true">#</a> 9：按需编译，体积比 vue2.x 更小</h3><p>框架的大小也会影响其性能。这是 Web 应用程序的唯一关注点，因为需要即时下载资源，在浏览器解析必要的 JavaScript 之前该应用程序是不可交互的。对于单页应用程序尤其如此。尽管 Vue 一直是相对轻量级的（Vue 2 的运行时大小压缩为 23 KB）。</p><p>在 Vue 3 中，通过将大多数全局 API 和内部帮助程序移至 ES 模块导出来，实现了这一目标。这使现代的打包工具可以静态分析模块依赖性并删除未使用的导出相关的代码。模板编译器还会生成友好的 <code>Tree-shaking</code> 代码，在模板中实际使用了该功能时才导入该功能的帮助程序。 Vue3 移除一些不常用的 API; 引入 <code>tree-shaking</code>，可以将无用模块“剪辑”，仅打包需要的，使打包的整体体积变小了</p><p>框架的某些部分永远不会 <code>Tree-shaking</code>，因为它们对于任何类型的应用都是必不可少的。我们将这些必不可少的部分的度量标准称为基准尺寸。尽管增加了许多新功能，但 Vue 3 的基准大小压缩后约为 10 KB，还不到 Vue 2 的一半。</p><h3 id="_10-支持多根节点组件" tabindex="-1"><a class="header-anchor" href="#_10-支持多根节点组件" aria-hidden="true">#</a> 10：支持多根节点组件</h3><p>Vue3 一个模板不再限制有多个根节点，(多个根节点上的 <code>Attribute</code> 继承) 需要显式定义 <code>attribute</code> 应该分布在哪里。否则控制台会给出警告提示。</p><p>在 Vue 3 中，组件现在正式支持多根节点组件，即片段！</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 在 2.x 中，不支持多根组件，当用户意外创建多根组件时会发出警告，因此，为了修复此错误，许多组件被包装在一个中。如下</span>
<span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>header<span class="token operator">&gt;</span><span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>header<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>main<span class="token operator">&gt;</span><span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>main<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>footer<span class="token operator">&gt;</span><span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>footer<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span>
<span class="token comment">// 在 3.x 中，组件现在可以有多个根节点！但是，这确实要求开发者明确定义属性应该分布在哪里。</span>
<span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>header<span class="token operator">&gt;</span><span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>header<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>main v<span class="token operator">-</span>bind<span class="token operator">=</span><span class="token string">&quot;$attrs&quot;</span><span class="token operator">&gt;</span><span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>main<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>footer<span class="token operator">&gt;</span><span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>footer<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Vue 是国内最火的前端框架之一。性能提升，运行速度是 vue2 的 1.2-2 倍。 体积更小，按需编译体积 vue2 要更小。 类型推断，更好的支持 ts 这个也是趋势。 高级给予，暴露了更底层的 API 和提供更先进的内置组件。 组合 API，能够更好的组织逻辑，封装逻辑，复用逻辑</p><h2 id="二、优化方案" tabindex="-1"><a class="header-anchor" href="#二、优化方案" aria-hidden="true">#</a> 二、优化方案</h2><p>vue3 从很多层面都做了优化，可以分成三个方面：</p><ol><li>源码</li><li>性能</li><li>语法 API</li></ol><h3 id="源码" tabindex="-1"><a class="header-anchor" href="#源码" aria-hidden="true">#</a> 源码</h3><p>源码可以从两个层面展开：</p><ol><li>源码管理</li><li><code>TypeScript</code></li></ol><h4 id="源码管理" tabindex="-1"><a class="header-anchor" href="#源码管理" aria-hidden="true">#</a> 源码管理</h4><p><code>vue3</code>整个源码是通过 <code>monorepo </code>的方式维护的，根据功能将不同的模块拆分到<code>packages </code>目录下面不同的子目录中</p><p><img src="https://static.vue-js.com/d7c32520-5c58-11eb-ab90-d9ae814b240d.png" alt=""></p><p>这样使得模块拆分更细化，职责划分更明确，模块之间的依赖关系也更加明确，开发人员也更容易阅读、理解和更改所有模块源码，提高代码的可维护性 另外一些 <code>package</code>（比如 <code>reactivity</code> 响应式库）是可以独立于 Vue 使用的，这样用户如果只想使用 Vue3 的响应式能力，可以单独依赖这个响应式库而不用去依赖整个 Vue</p><h4 id="typescript" tabindex="-1"><a class="header-anchor" href="#typescript" aria-hidden="true">#</a> TypeScript</h4><p><code>Vue3</code>是基于<code>typeScript</code>编写的，提供了更好的类型检查，能支持复杂的类型推导</p><h3 id="性能" tabindex="-1"><a class="header-anchor" href="#性能" aria-hidden="true">#</a> 性能</h3><ol><li>体积优化</li><li>编译优化</li><li>数据劫持优化</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 在vue2中，数据劫持是通过Object.defineProperty，这个 API 有一些缺陷，并不能检测对象属性的添加和删除</span>
Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span><span class="token punctuation">{</span>
  <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// track</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// trigger</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// 尽管Vue为了解决这个问题提供了 set和delete实例方法，但是对于用户来说，还是增加了一定的心智负担</span>
<span class="token comment">// 同时在面对嵌套层级比较深的情况下，就存在性能问题</span>
<span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">d</span><span class="token operator">:</span> <span class="token number">1</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 相比之下，vue3是通过proxy监听整个对象，那么对于删除还是监听当然也能监听到</span>
<span class="token comment">// 同时Proxy 并不能监听到内部深层次的对象变化，而 Vue3 的处理方式是在getter 中去递归响应式，这样的好处是真正访问到的内部对象才会变成响应式，而不是无脑递归</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Proxy API</code> 并不能监听到对象内部深层次的属性变化，因此它的处理方式是<code>在 getter 中去递归响应式</code>，这样做的好处是<code>真正访问到的内部属性才会变成响应式</code>，简单的可以说是<code>按需实现响应式，减少性能消耗</code>。</p><h3 id="语法-api" tabindex="-1"><a class="header-anchor" href="#语法-api" aria-hidden="true">#</a> 语法 API</h3><p>composition API，其两大显著的优化：</p><ol><li>优化逻辑组织</li><li>优化逻辑复用</li></ol><h4 id="逻辑组织" tabindex="-1"><a class="header-anchor" href="#逻辑组织" aria-hidden="true">#</a> 逻辑组织</h4><p>一张图，我们可以很直观地感受到 <code>Composition API </code>在逻辑组织方面的优势</p><p><img src="https://static.vue-js.com/e5804bc0-5c58-11eb-85f6-6fac77c0c9b3.png" alt=""></p><p>相同功能的代码编写在一块，而不像<code>options API</code>那样，各个功能的代码混成一块</p><h4 id="逻辑复用" tabindex="-1"><a class="header-anchor" href="#逻辑复用" aria-hidden="true">#</a> 逻辑复用</h4><p>在<code>vue2</code>中，我们是通过<code>mixin</code>实现功能混合，如果多个<code>mixin</code>混合，会存在两个非常明显的问题：<code>命名冲突和数据来源不清晰</code></p><p>而通过<code>composition</code>这种形式，可以将一些复用的代码抽离出来作为一个函数，只要的使用的地方直接进行调用即可</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> toRefs<span class="token punctuation">,</span> reactive<span class="token punctuation">,</span> onUnmounted<span class="token punctuation">,</span> onMounted <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">useMouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token function-variable function">update</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    state<span class="token punctuation">.</span>x <span class="token operator">=</span> e<span class="token punctuation">.</span>pageX<span class="token punctuation">;</span>
    state<span class="token punctuation">.</span>y <span class="token operator">=</span> e<span class="token punctuation">.</span>pageY<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token function">onMounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;mousemove&quot;</span><span class="token punctuation">,</span> update<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">onUnmounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;mousemove&quot;</span><span class="token punctuation">,</span> update<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token function">toRefs</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 组件使用</span>
<span class="token keyword">import</span> useMousePosition <span class="token keyword">from</span> <span class="token string">&quot;./mouse&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> x<span class="token punctuation">,</span> y <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useMousePosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span> x<span class="token punctuation">,</span> y <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，整个数据来源清晰了，即使去编写更多的<code>hook</code>函数，也不会出现命名冲突的问题</p>`,81),o=[t];function c(l,i){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","designgoals.html.vue"]]);export{r as default};
